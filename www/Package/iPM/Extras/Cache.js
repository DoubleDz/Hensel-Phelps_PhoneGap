// Generated by CoffeeScript 1.4.0
(function() {
  var Cache,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Cache = (function() {

    function Cache(user_id, model_project_list_cb, model_project_cb, model_user_cb) {
      var endpoint;
      this.user_id = user_id;
      this.model_project_list_cb = model_project_list_cb;
      this.model_project_cb = model_project_cb;
      this.model_user_cb = model_user_cb;
      this._HandleDeltas = __bind(this._HandleDeltas, this);

      this.prefix = 'CACHE';
      this.active_project = false;
      this.loading = this._PullProjects();
      if (!this.loading) {
        this._DoChild();
      }
      endpoint = window.EpicMvc.Extras.options.PollEndpoint;
      this.poller = new window.EpicMvc.Extras.Poll(endpoint, this.state.cursor, this._HandleDeltas);
      this.poller.Start();
    }

    Cache.prototype.Stop = function() {
      return this.poller.Stop();
    };

    Cache.prototype.GetProjectList = function() {
      return this.project_list;
    };

    Cache.prototype.GetProject = function(prid) {
      this.active_project = false;
      if (prid === false) {
        return false;
      }
      this.active_project = prid;
      if (this.loading === true) {
        return true;
      }
      if (!(prid in this.projects)) {
        return this.active_project = false;
      }
      return this.projects[prid];
    };

    Cache.prototype.AddProject = function(prid, rec, make_active) {
      this.projects[prid] = rec;
      this.project_list[prid] = rec.project;
      if (make_active === true) {
        return this.active_project = prid;
      }
    };

    Cache.prototype._LsRemove = function(what, what_id) {
      var f, key;
      f = 'E:Cache._LsRemove';
      return;
      key = [this.prefix, this.user_id, what];
      if (what_id != null) {
        key.push(what_id);
      }
      window.localStorage.removeItem(key.join('_'));
    };

    Cache.prototype._LsPut = function(what, what_id, value) {
      var f, key;
      f = 'E:Cache._LsPut';
      return;
      key = [this.prefix, this.user_id, what];
      if (what_id != null) {
        key.push(what_id);
      }
      window.localStorage.setItem(key.join('_'), JSON.stringify(value));
    };

    Cache.prototype._LsGet = function(what, what_id) {
      var f, js, key;
      f = 'E:Cache._LsGet';
      return {};
      key = [this.prefix, this.user_id, what];
      if (what_id != null) {
        key.push(what_id);
      }
      js = window.localStorage.getItem(key.join('_'));
      if (js) {
        return JSON.parse(js);
      } else {
        return {};
      }
    };

    Cache.prototype._PullProjects = function() {
      var id;
      this.projects = {};
      this.project_list = {};
      this.state = this._LsGet('state');
      if (!('cursor' in this.state)) {
        this.state.cursor = null;
        return true;
      }
      this.project_list = this._LsGet('project_list');
      for (id in this.project_list) {
        this.projects[id] = this._LsGet('project', id);
      }
      return false;
    };

    Cache.prototype._HandleDeltas = function(data) {
      var active, exists, f, id, msgs, prid, project, rec, reject_prid, reset_prid, was_loading, _i, _len, _ref, _ref1;
      f = 'E:Cache._HandleDeltas';
      was_loading = this.loading;
      reset_prid = [];
      reject_prid = [];
      if (data.project) {
        _log2(f, 'project', data.project);
        for (prid in data.project) {
          project = data.project[prid];
          _ref = project.members || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rec = _ref[_i];
            if ('id' in rec) {
              rec.project_id = rec.id;
            }
          }
          active = (Number(prid)) === this.active_project;
          exists = prid in this.project_list;
          switch (project.cmd) {
            case 'reject':
              if (exists) {
                reject_prid.push(Number(prid));
              }
              delete this.projects[prid];
              delete this.project_list[prid];
              this._LsRemove('project', prid);
              this._LsPut('project_list', null, this.project_list);
              break;
            case 'reset':
              this._HandleProjectReset(prid, project);
              if (true) {
                reset_prid.push(Number(prid));
              } else {
                if (active) {
                  this.model_project_cb(prid, msgs);
                }
              }
              this._LsPut('project', prid, this.projects[prid]);
              this._LsPut('project_list', null, this.project_list);
              break;
            case 'merge':
              msgs = this._HandleProjectMerge(prid, project);
              if (active) {
                this.model_project_cb(prid, msgs);
              }
              this._LsPut('project', prid, this.projects[prid]);
              this._LsPut('project_list', null, this.project_list);
              break;
            default:
              alert("Unknown change.sync verb (" + project.cmd + ") for project (" + prid + ")");
          }
        }
      }
      if (data.user && this.model_user_cb) {
        _log2(f, 'user', data.user);
        _ref1 = data.user;
        for (id in _ref1) {
          rec = _ref1[id];
          if (rec.cmd === 'merge') {
            this.model_user_cb(rec.cmd, rec.user);
          }
        }
      }
      this.loading = false;
      this._LsPut('state', null, {
        cursor: data.cursor
      });
      if (reset_prid.length || reject_prid.length || was_loading === true) {
        this.model_project_list_cb(reset_prid, reject_prid);
      }
      return true;
    };

    Cache.prototype._HandleProjectReset = function(prid, changes) {
      var project, rec, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
      this.projects[prid] = {
        project: {},
        folders: {},
        files: {},
        members: {},
        activities: []
      };
      project = this.projects[prid];
      $.extend(true, project.project, changes.project);
      _ref = changes.folders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rec = _ref[_i];
        project.folders[rec.id] = $.extend(true, {}, rec);
      }
      _ref1 = changes.files;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        rec = _ref1[_j];
        project.files[rec.id] = $.extend(true, {}, rec);
      }
      _ref2 = changes.members;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        rec = _ref2[_k];
        project.members[rec.user_id] = $.extend(true, {}, rec);
      }
      _ref4 = (_ref3 = changes.activities) != null ? _ref3 : [];
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        rec = _ref4[_l];
        project.activities.push($.extend(true, {}, rec));
      }
      this.project_list[prid] = project.members[this.user_id] || {
        "class": 20
      };
      $.extend(true, this.project_list[prid], project.project);
      this.project_list[prid].project_id = project.project.id;
      return this._DoChild(prid);
    };

    Cache.prototype._HandleProjectMerge = function(prid, changes) {
      var RemoveFolderRecurse, anid, annot_id, child_annot, child_files, child_folders, cmd, f, fiid, file_ids, id, ids, msgs, new_rec, old_rec, orig, perm_chg, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      f = 'E:Cache._HandleProjectMerge:' + prid;
      msgs = {
        project: false,
        folders: [],
        files: [],
        members: [],
        activities: []
      };
      orig = this.projects[prid];
      if (changes.project) {
        msgs.project = true;
      }
      if ((_ref = changes.folders) != null ? _ref.length : void 0) {
        _log2(f, 'folders', changes.folders.length);
        _ref1 = changes.folders;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          new_rec = _ref1[_i];
          if (typeof new_rec.folder_id === 'string') {
            new_rec.folder_id = Number(new_rec.folder_id);
          }
          old_rec = orig.folders[new_rec.id];
          ids = [];
          file_ids = [];
          cmd = 'UNKNOWN';
          perm_chg = false;
          if (old_rec === void 0) {
            cmd = 'add';
            orig.folders[new_rec.id] = $.extend(true, {}, new_rec);
            this._AddChild(prid, 'folder', new_rec);
          } else if (new_rec.disposal === 1) {
            cmd = 'delete';
            child_folders = this.projects[prid].folder_folders;
            child_files = this.projects[prid].folder_files;
            child_annot = this.projects[prid].file_annot;
            RemoveFolderRecurse = function(id) {
              var anid, child, fiid, _j, _k, _len1, _len2, _ref2, _ref3;
              if (id in child_files) {
                _ref2 = child_files[id];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  fiid = _ref2[_j];
                  if (fiid in child_annot) {
                    for (anid in child_annot[fiid]) {
                      file_ids.push(anid);
                      delete _this.projects[prid].files[anid];
                    }
                    delete child_annot[fiid];
                  }
                  file_ids.push(fiid);
                  delete _this.projects[prid].files[fiid];
                }
                delete child_files[id];
              }
              if (id in child_folders) {
                _ref3 = child_folders[id];
                for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                  child = _ref3[_k];
                  ids.push(child);
                  RemoveFolderRecurse(child);
                }
                delete child_folders[id];
              }
              return delete _this.projects[prid].folders[id];
            };
            RemoveFolderRecurse(new_rec.id);
          } else if ('folder_id' in new_rec && new_rec.folder_id !== old_rec.folder_id) {
            cmd = 'move';
            perm_chg = new_rec.perm !== old_rec.perm;
            this._RmChild(prid, 'folder', old_rec);
            $.extend(true, old_rec, new_rec);
            this._AddChild(prid, 'folder', new_rec);
          } else {
            cmd = 'change';
            $.extend(true, old_rec, new_rec);
          }
          if (perm_chg && new_rec.perm === 6) {
            child_files = this.projects[prid].folder_files;
            child_annot = this.projects[prid].file_annot;
            id = new_rec.id;
            if (id in child_files) {
              _ref2 = child_files[id];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                fiid = _ref2[_j];
                if (fiid in child_annot) {
                  for (anid in child_annot[fiid]) {
                    file_ids.push(anid);
                    delete this.projects[prid].files[anid];
                  }
                  delete child_annot[fiid];
                }
                file_ids.push(fiid);
                delete this.projects[prid].files[fiid];
              }
              delete child_files[id];
            }
          }
          msgs.folders[new_rec.id] = {
            cmd: cmd,
            ids: ids,
            file_ids: file_ids
          };
        }
      }
      if ((_ref3 = changes.files) != null ? _ref3.length : void 0) {
        _ref4 = changes.files;
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          new_rec = _ref4[_k];
          old_rec = orig.files[new_rec.id];
          ids = [];
          cmd = 'UNKNOWN';
          if (old_rec === void 0) {
            cmd = 'add';
            orig.files[new_rec.id] = $.extend(true, {}, new_rec);
            this._AddChild(prid, 'file', new_rec);
          } else if (new_rec.disposal === 1) {
            cmd = 'delete';
            ids = this.projects[prid].file_annot[old_rec.id] || [];
            for (_l = 0, _len3 = ids.length; _l < _len3; _l++) {
              annot_id = ids[_l];
              delete this.projects[prid].files[annot_id];
            }
            delete this.projects[prid].file_annot[old_rec.id];
            this._RmChild(prid, 'file', old_rec);
            delete this.projects[prid].files[old_rec.id];
          } else if ('folder_id' in new_rec && new_rec.folder_id !== old_rec.folder_id) {
            cmd = 'move';
            this._RmChild(prid, 'file', old_rec);
            $.extend(true, old_rec, new_rec);
            this._AddChild(prid, 'file', new_rec);
            if (new_rec.type === 1) {
              alert('Unexpected folder_id change on annotation');
            }
            ids = this.projects[prid].file_annot[new_rec.id] || [];
            for (_m = 0, _len4 = ids.length; _m < _len4; _m++) {
              annot_id = ids[_m];
              this.projects[prid].files[annot_id].folder_id = new_rec.folder_id;
            }
          } else {
            cmd = 'change';
            $.extend(true, old_rec, new_rec);
          }
          msgs.files[new_rec.id] = {
            cmd: cmd,
            ids: ids
          };
        }
      }
      if ((_ref5 = changes.members) != null ? _ref5.length : void 0) {
        _ref6 = changes.members;
        for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
          new_rec = _ref6[_n];
          old_rec = orig.members[new_rec.user_id];
          ids = [];
          cmd = 'UNKNOWN';
          if (old_rec === void 0) {
            cmd = 'add';
            orig.members[new_rec.user_id] = $.extend(true, {}, new_rec);
          } else if (new_rec.disposal === 1) {
            cmd = 'delete';
            delete this.projects[prid].members[old_rec.user_id];
          } else {
            cmd = 'change';
            $.extend(true, old_rec, new_rec);
          }
          msgs.members[new_rec.user_id] = {
            cmd: cmd,
            old_rec: old_rec,
            new_rec: new_rec
          };
        }
      }
      if ((_ref7 = changes.activities) != null ? _ref7.length : void 0) {
        _ref8 = changes.activities;
        for (_o = 0, _len6 = _ref8.length; _o < _len6; _o++) {
          new_rec = _ref8[_o];
          orig.activities.push($.extend(true, {}, new_rec));
        }
      }
      return _log2(f, 'msgs', msgs);
    };

    Cache.prototype._RmChild = function(prid, table, rec) {
      var ix, ixarray, p_table, parent;
      switch (table) {
        case 'folder':
          parent = rec.folder_id;
          p_table = 'folder_folders';
          break;
        case 'file':
          if (rec.type === 1) {
            parent = rec.file_id;
            p_table = 'file_annot';
          } else {
            parent = rec.folder_id;
            p_table = 'folder_files';
          }
      }
      ixarray = this.projects[prid][p_table][parent];
      ix = ixarray.indexOf(rec.id);
      if (ix !== -1) {
        return ixarray.splice(ix, 1);
      }
    };

    Cache.prototype._AddChild = function(prid, table, rec) {
      var p_table, parent, _base, _ref;
      switch (table) {
        case 'folder':
          parent = rec.folder_id;
          p_table = 'folder_folders';
          break;
        case 'file':
          if (rec.type === 1) {
            parent = rec.file_id;
            p_table = 'file_annot';
          } else {
            parent = rec.folder_id;
            p_table = 'folder_files';
          }
          break;
        default:
          alert('BORKEN 473638');
      }
      if ((_ref = (_base = this.projects[prid][p_table])[parent]) == null) {
        _base[parent] = [];
      }
      return this.projects[prid][p_table][parent].push(rec.id);
    };

    Cache.prototype._DoChild = function(prid) {
      var annot, f, files, folders, id, list, row, tables, _i, _len, _name, _ref, _ref1, _results;
      f = 'E:Cache._DoChild:' + prid;
      if (prid != null) {
        list = [prid];
      } else {
        list = (function() {
          var _results;
          _results = [];
          for (id in this.project_list) {
            _results.push(id);
          }
          return _results;
        }).call(this);
      }
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        prid = list[_i];
        tables = this.projects[prid];
        $.extend(this.projects[prid], {
          folder_folders: {},
          folder_files: {},
          file_annot: {}
        });
        folders = this.projects[prid].folder_folders;
        _ref = tables.folders;
        for (id in _ref) {
          row = _ref[id];
          if ((_ref1 = folders[_name = row.folder_id]) == null) {
            folders[_name] = [];
          }
          folders[row.folder_id].push(row.id);
        }
        files = this.projects[prid].folder_files;
        annot = this.projects[prid].file_annot;
        _results.push((function() {
          var _name1, _name2, _ref2, _ref3, _ref4, _results1;
          _ref2 = tables.files;
          _results1 = [];
          for (id in _ref2) {
            row = _ref2[id];
            if (row.type === 1) {
              if ((_ref3 = annot[_name1 = row.file_id]) == null) {
                annot[_name1] = [];
              }
              _results1.push(annot[row.file_id].push(row.id));
            } else {
              if ((_ref4 = files[_name2 = row.folder_id]) == null) {
                files[_name2] = [];
              }
              _results1.push(files[row.folder_id].push(row.id));
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Cache;

  })();

  window.EpicMvc.Extras.Cache = Cache;

}).call(this);
