// Generated by CoffeeScript 1.4.0
(function() {
  var Poll,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Poll = (function() {

    function Poll(endpoint, cursor, cb) {
      var f;
      this.endpoint = endpoint;
      this.cursor = cursor;
      this.cb = cb;
      this.Start = __bind(this.Start, this);

      f = 'Poll::constructor';
      this.resource = 'Poll';
      this.retry = 500;
      this.retry_max = 30000;
      this.xhr = false;
      this.pending = false;
      this.abort = false;
    }

    Poll.prototype.Stop = function() {
      var f;
      f = 'E:Poll.Stop';
      _log2(f, {
        pending: this.pending
      }, (this.xhr ? 'running' : 'not-running'));
      this.abort = true;
      if (this.pending !== false) {
        clearTimeout(this.pending);
        this.pending = false;
      }
      if (this.xhr !== false) {
        this.xhr.abort();
        return this.xhr = false;
      }
    };

    Poll.prototype.Start = function(delay) {
      var data_obj, f, options,
        _this = this;
      f = 'Poll::Start';
      if (delay === true) {
        this.abort = false;
        delay = this.retry;
      }
      if (this.pending !== false || this.xhr !== false || this.abort === true) {
        return;
      }
      if (delay == null) {
        delay = this.retry;
      }
      if (delay > this.retry_max) {
        delay = this.retry_max;
      }
      data_obj = {
        cursors: this.cursor
      };
      options = {
        cache: false,
        async: true,
        timeout: 0,
        type: 'post',
        dataType: 'json',
        data: JSON.stringify(data_obj),
        url: this.endpoint + this.resource,
        success: function(data) {
          var again;
          _this.xhr = false;
          if (_this.abort === true) {
            return;
          }
          again = _this.cb(data);
          if (data.cursors != null) {
            _this.cursor = data.cursors;
          }
          if (again) {
            _this.Start();
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          _this.xhr = false;
          _log(f, ' AJAX ERROR', {
            jq: jqXHR,
            ts: textStatus,
            et: errorThrown
          });
          if (_this.abort === true) {
            return;
          }
          if (errorThrown === 'Unauthorized') {
            window.EpicMvc.Extras.Rest.doToken();
          }
          _this.Start(delay * 2);
        }
      };
      this.pending = setTimeout(function() {
        var token;
        _this.pending = false;
        if (_this.abort === true) {
          return;
        }
        token = window.EpicMvc.Extras.Rest.token;
        if (token === false) {
          return;
        }
        options.url += '?auth_token=' + encodeURIComponent("" + token.access_token);
        return _this.xhr = $.ajax(options);
      }, delay);
    };

    return Poll;

  })();

  window.EpicMvc.Extras.Poll = Poll;

}).call(this);
