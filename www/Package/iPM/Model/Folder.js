// Generated by CoffeeScript 1.9.2
(function() {
  var Folder,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Folder = (function(superClass) {
    extend(Folder, superClass);

    function Folder(Epic, view_nm) {
      this.UpdateProjectAsync = bind(this.UpdateProjectAsync, this);
      this.UpdateProjectListAsync = bind(this.UpdateProjectListAsync, this);
      var ss;
      ss = {
        project_active: false,
        folder_view_id: {},
        folder_edit_id: false,
        file_edit_id: false,
        upload_folder: false,
        root_open: {
          FORMS: false,
          PUBLIC: true,
          PRIVATE: true
        },
        project_edit_id: false,
        project_type: 1,
        tab_profile: 'edit'
      };
      Folder.__super__.constructor.call(this, Epic, view_nm, ss);
      this.rest = window.EpicMvc.Extras.Rest;
      this.clip = {
        folders: {},
        files: {},
        undofolders: [],
        undofiles: []
      };
      this._resetProjectCache();
      this.toggle_item = false;
      this.upload_file = {};
      this.upload_response = {};
      this.team_add_issue = false;
      this.team_add_open = false;
      this.team_filter_open = false;
      this.activity_filter_open = false;
      this.folder_filter_open = false;
      this.is_logged_in = false;
      if (this.rest.doToken() !== false) {
        this.eventLogin();
      }
      this.cache_pending = true;
      this.c_version_child = {};
      this.tab_profile_choices = ['edit', 'projects', 'edit', 'password', 'extended', 'expose', 'subscription', 'sponsor', 'billing'];
      this.c_notice_text = false;
      this.file_signed_url = false;
    }

    Folder.prototype.eventNewRequest = function() {
      this.team_add_issue = false;
      delete this.Table.MemberExtended;
      return delete this.Table.Owner;
    };

    Folder.prototype.eventLogin = function() {
      var me_id;
      if (this.is_logged_in === true) {
        return;
      }
      me_id = (this.Epic.getViewTable('User/Me'))[0].id;
      setTimeout(((function(_this) {
        return function() {
          return _this.cache = new window.EpicMvc.Extras.Cache(me_id, _this.UpdateProjectListAsync, _this.UpdateProjectAsync, (_this.Epic.getInstance('User')).UpdateUserAsync);
        };
      })(this)), 0);
      return this.is_logged_in = true;
    };

    Folder.prototype.eventLogout = function() {
      var ref;
      this.is_logged_in = false;
      this.invalidateTables(['Notice']);
      if ((ref = this.cache) != null) {
        ref.Stop();
      }
      return true;
    };

    Folder.prototype.action = function(act, p) {
      var accept, action, cb, changed, clip_ix, data, drop, drop_type, endp, entry, f, foid, found, from_file_id, from_folder_id, from_id, from_project, from_undofile_id, from_undofolder_id, fv, i, id, is_version, items, j, k, l, len, len1, len2, len3, len4, m, map_perm_rest, map_perm_val, me, n, o, oF, oldF, oldP, parent_folder, prid, projects, q, r, rec, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, resource, response, result, sort, table, tbls, to_folder_id, upgrading, usid, valid, vals, was;
      f = "M:Folder.action(" + act + ")";
      _log2(f, p, (function() {
        var results1;
        results1 = [];
        for (n in this.ss) {
          results1.push({}[n] = this[n]);
        }
        return results1;
      }).call(this));
      r = {};
      i = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
      m = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
      switch (act) {
        case 'url_team':
          r.url = "team-" + this.project_active;
          break;
        case 'url_team_context':
          if (Number(p.context !== this.project_active)) {
            this._resetProjectCache();
          }
          this.project_active = Number(p.context);
          break;
        case 'url_landing':
          r.url = this.project_active ? ("folders-" + this.project_active) + (this.folder_view_id[this.project_active] ? ":" + this.folder_view_id[this.project_active] : '') : '';
          break;
        case 'url_landing_context':
          vals = p.context.split(':');
          ref = [this.project_active, this.folder_view_id[this.project_active]], oldP = ref[0], oldF = ref[1];
          if (((ref1 = vals[0]) != null ? ref1.length : void 0) && Number(vals[0])) {
            this.project_active = Number(vals[0]);
          }
          if (((ref2 = vals[1]) != null ? ref2.length : void 0) && Number(vals[1])) {
            this.folder_view_id[this.project_active] = Number(vals[1]);
          } else {
            delete this.folder_view_id[this.project_active];
          }
          if (this.project && this.project.id === this.project_active && (this.folder_view_id[this.project_active] != null)) {
            if (!this.c_folders[this.folder_view_id[this.project_active]]) {
              delete this.folder_view_id[this.project_active];
            }
          }
          if (oldP !== this.project_active || oldF !== this.folder_view_id[this.project_active]) {
            this.Table = {};
          }
          if (oldP !== this.project_active) {
            this._resetProjectCache();
          }
          break;
        case 'project_type':
          was = this.project_type;
          this.project_type = (function() {
            switch (p.type) {
              case 'template':
                return 0;
              case 'project':
                return 1;
              case 'toggle':
                if (was === 0) {
                  return 1;
                } else {
                  return 0;
                }
            }
          })();
          if (was !== this.project_type) {
            this.root_open = {
              FORMS: false,
              PUBLIC: true,
              PRIVATE: true
            };
            this.project_active = false;
            this.Table = {};
          }
          r.success = 'SUCCESS';
          break;
        case 'open_close':
          was = this.root_open[p.folder];
          this.root_open[p.folder] = (function() {
            switch (p.type) {
              case 'open':
                return true;
              case 'close':
                return false;
              case 'toggle':
                return !this.root_open[p.folder];
            }
          }).call(this);
          if (was !== this.root_open[p.folder]) {
            this.Table = {};
          }
          r.success = 'SUCCESS';
          break;
        case 'toggle':
          if (this.toggle_item === false) {
            this.toggle_item = {
              type: p.type,
              id: Number(p.id)
            };
          } else if (this.toggle_item.id === Number(p.id)) {
            if (this.toggle_item.type === p.type) {
              this.toggle_item = false;
            } else {
              this.toggle_item.type = p.type;
            }
          } else {
            this.toggle_item = {
              type: p.type,
              id: Number(p.id)
            };
          }
          this.c_version_child = {};
          this.Table = {};
          r.success = 'SUCCESS';
          break;
        case 'choose_upload_folder':
          if (this.upload_folder !== Number(p.upload_folder)) {
            this.upload_folder = Number(p.upload_folder);
            this.Table = {};
          }
          r.success = 'SUCCESS';
          break;
        case 'default_first_project':
        case 'choose_first_project':
          projects = this._getMemberRecs();
          sort = (function() {
            var results1;
            results1 = [];
            for (id in projects) {
              rec = projects[id];
              if (rec.type === this.project_type && rec.pending !== true) {
                results1.push({
                  id: id,
                  name: rec.name
                });
              }
            }
            return results1;
          }).call(this);
          sort.sort(function(a, b) {
            if (a.name.toLowerCase() === b.name.toLowerCase()) {
              return 0;
            } else if (a.name.toLowerCase() > b.name.toLowerCase()) {
              return 1;
            } else {
              return -1;
            }
          });
          id = (ref3 = sort[0]) != null ? ref3.id : void 0;
          if (id) {
            if (typeof this.project_active !== 'number' || act === 'choose_first_project') {
              if (this.project_active !== Number(id)) {
                this._resetProjectCache();
                this.project_active = Number(id);
                if (this.c_member[this.project_active]["class"] < this.c_member[this.project_active].invited_as) {
                  m.add('COULD_BE_MANAGER');
                }
                this.invalidateTables(true);
              }
            }
            r.success = 'SUCCESS';
            this.invalidateTables(['Member']);
          } else {
            r.fail = 'NO_PROJECTS';
          }
          break;
        case 'choose_project_view':
          upgrading = false;
          if (this.project_active !== Number(p.id)) {
            projects = this._getMemberRecs();
            valid = false;
            for (id in projects) {
              entry = projects[id];
              if (entry.project_id === Number(p.id)) {
                valid = true;
                break;
              }
            }
            if (valid) {
              this._resetProjectCache();
              this.root_open = {
                FORMS: false,
                PUBLIC: true,
                PRIVATE: true
              };
              this.project_active = Number(p.id);
              if (this.c_member[this.project_active]["class"] === 0) {
                result = this.rest.post("User/me/Project/" + this.project_active + "/unrestrict", f);
                if (result.SUCCESS === true) {
                  this.c_member[this.project_active]["class"] = result.new_class;
                } else {
                  this.rest.makeIssue(m, result);
                  upgrading = true;
                }
              }
              if (!upgrading && this.c_member[this.project_active]["class"] < this.c_member[this.project_active].invited_as) {
                m.add('COULD_BE_MANAGER');
              }
              this.c_version_child = {};
              this.invalidateTables(true);
              r.success = 'SUCCESS';
              r.note = 'CHANGE';
              if (upgrading) {
                r.upgrade = 'YES';
              }
            } else {
              r.fail = 'INVALID_PROJECT';
              i.add('INVALID_PROJECT');
            }
          } else {
            r.success = 'SUCCESS';
            r.note = 'SAME';
          }
          break;
        case 'choose_folder_view':
          changed = false;
          if (p.id === false || p.id === '0') {
            if (this.folder_view_id[this.project_active]) {
              changed = true;
              delete this.folder_view_id[this.project_active];
            }
          } else if (Number(p.id)) {
            if (this.folder_view_id[this.project_active] !== Number(p.id)) {
              changed = true;
              this.folder_view_id[this.project_active] = Number(p.id);
            }
          }
          _log2(changed, p.id, this.folder_view_id[this.project_active]);
          if (changed) {
            this.invalidateTables(true);
          }
          r.success = 'SUCCESS';
          break;
        case 'choose_folder_edit':
          this.folder_edit_id = p.id === false ? false : Number(p.id);
          (this.Epic.getFistInstance('Folder')).clearValues();
          this.Table = {};
          r.success = 'SUCCESS';
          break;
        case 'choose_file_edit':
          this.file_edit_id = p.id === false ? false : Number(p.id);
          (this.Epic.getFistInstance('File')).clearValues();
          this.Table = {};
          r.success = 'SUCCESS';
          break;
        case 'choose_permission':
          usid = Number(p.id);
          foid = Number(p.folder);
          prid = this.project_active;
          resource = "User/" + usid + "/Project/" + prid + "/Folder/" + foid + "/setpermission";
          map_perm_rest = {
            None: 'none',
            Viewer: 'view',
            Contributor: 'contribute',
            Collaborator: 'collaborate'
          };
          map_perm_val = {
            Viewer: 5,
            Contributor: 4,
            Collaborator: 3
          };
          this._getTeamPerms();
          result = this.rest.post(resource, f, {
            type: map_perm_rest[p.perm],
            descend_flag: p.descend
          });
          if (result.SUCCESS) {
            delete this.c_team_perms;
            r.success = 'SUCCESS';
            this.Table = {};
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          }
          break;
        case 'delete_folder':
          if (this.folder_edit_id === false) {
            r.success = 'NO CONTEXT';
            return [r, i, m];
          }
          endp = 'Project/' + this.project_active + '/Folder/' + this.folder_edit_id + '/delete';
          result = this.rest.post(endp, f);
          if (result.SUCCESS === true) {
            this.c_folders[this.folder_edit_id].disposal = 1;
            this.folder_edit_id = false;
            this.Table = {};
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          break;
        case 'save_folder':
          if (this.folder_edit_id === false) {
            r.success = 'NO CONTEXT';
            return [r, i, m];
          }
          oF = this.Epic.getFistInstance('Folder');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          endp = 'Project/' + this.project_active + '/Folder/' + this.folder_edit_id + '/rename';
          result = this.rest.post(endp, f, fv);
          if (result.SUCCESS === true) {
            this.c_folders[this.folder_edit_id].name = fv.name;
            this.folder_edit_id = false;
            this.Table = {};
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          break;
        case 'delete_file':
          if (this.file_edit_id === false) {
            r.success = 'NO CONTEXT';
            return [r, i, m];
          }
          endp = 'Project/' + this.project_active + '/File/' + this.file_edit_id + '/delete';
          result = this.rest.post(endp, f);
          if (result.SUCCESS === true) {
            this.c_files[this.file_edit_id].disposal = 1;
            this.file_edit_id = false;
            this.Table = {};
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          break;
        case 'save_file':
          if (this.file_edit_id === false) {
            r.success = 'NO CONTEXT';
            return [r, i, m];
          }
          oF = this.Epic.getFistInstance('File');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          result = this.rest.post("Project/" + this.project_active + "/File/" + this.file_edit_id + "/rename", f, fv);
          if (result.SUCCESS === true) {
            this.c_files[this.file_edit_id].name = fv.name;
            this.file_edit_id = false;
            this.Table = {};
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          break;
        case 'add_folder':
          oF = this.Epic.getFistInstance('Folder');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          result = this.rest.post("/Project/" + this.project_active + "/Folder", f, {
            name: fv.name,
            folder_id: this.upload_folder,
            counter: this.project.delta_cnt
          });
          if (result.SUCCESS === true) {
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          break;
        case 'add_file':
          oF = this.Epic.getFistInstance('File');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          result = this.rest.post('File', f, {
            name: fv.name,
            size: fv.size,
            folder_id: this.folder_view_id[this.project_active]
          });
          if (result.SUCCESS === true) {
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          break;
        case 'get_file_url':
          response = this.rest.get("/Project/" + this.project_active + "/File/" + p.id + "/inline", 'S3Open()');
          if (!('signed_url' in response)) {
            alert('S3Open() bad response: ' + JSON.stringify(response));
            return false;
          } else {
            this.file_signed_url = response.signed_url;
            this.Table = {};
            r.success = 'SUCCESS';
          }
          break;
        case 'choose_project_edit':
          this.project_edit_id = p.id === false ? false : Number(p.id);
          this.Table = {};
          r.success = 'SUCCESS';
          break;
        case 'clone_project':
          oF = this.Epic.getFistInstance('CloneProject');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          fv.project_id = this.project_edit_id;
          result = this.rest.post('User/me/Project', f, fv);
          if (result.SUCCESS === true) {
            this.c_member[result.project_id] = {
              name: result.name,
              project_id: result.project_id,
              invited_as: result.invited_as,
              type: 1,
              pending: true
            };
            table = {
              project: this.c_member[result.project_id],
              folders: {},
              files: {},
              file_annot: [],
              members: {},
              activities: []
            };
            this.cache.AddProject(result.project_id, table);
            ref4 = result.restricted_users;
            for (j = 0, len = ref4.length; j < len; j++) {
              rec = ref4[j];
              m.add('RESTRICTED_MEMBER_ADDED', [rec.first_name, rec.last_name, rec.email]);
            }
            this.Table = {};
            r.success = 'SUCCESS';
            r.project_id = result.project_id;
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            _log2(f, 'NOPE', {
              result: result,
              i: i,
              r: r
            });
            return [r, i, m];
          }
          break;
        case 'add_project':
          oF = this.Epic.getFistInstance('Project');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          result = this.rest.post('User/me/Project', f, fv);
          if (result.SUCCESS === true) {
            this.c_member[result.project_id] = {
              name: result.name,
              project_id: result.project_id,
              invited_as: result.invited_as,
              type: 1,
              pending: true
            };
            table = {
              project: this.c_member[result.project_id],
              folders: {},
              files: {},
              file_annot: [],
              members: {},
              activities: []
            };
            this.cache.AddProject(result.project_id, table);
            this.Table = {};
            r.success = 'SUCCESS';
            r.project_id = result.project_id;
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            _log2(f, 'NOPE', {
              result: result,
              i: i,
              r: r
            });
            return [r, i, m];
          }
          break;
        case 'add_template':
          oF = this.Epic.getFistInstance('Template');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          result = this.rest.post('User/me/Template', f, fv);
          if (result.SUCCESS === true) {
            this.c_member[result.project_id] = {
              name: result.name,
              project_id: result.project_id,
              invited_as: result.invited_as,
              type: 0,
              pending: true
            };
            table = {
              project: this.c_member[result.project_id],
              folders: {},
              files: {},
              file_annot: [],
              members: {},
              activities: []
            };
            this.cache.AddProject(result.project_id, table);
            this.Table = {};
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            _log2(f, 'NOPE', {
              result: result,
              i: i,
              r: r
            });
            return [r, i, m];
          }
          break;
        case 'delete_project':
          result = this.rest.post("Project/" + this.project_edit_id + "/delete", f);
          if (result.SUCCESS === true) {
            delete this.c_member[Number(this.project_edit_id)];
            if (this.project_edit_id === this.project_active) {
              this._resetProjectCache(true);
            }
            this.invalidateTables(['Team', 'User']);
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            _log2(f, 'NOPE', {
              result: result,
              i: i,
              r: r
            });
            return [r, i, m];
          }
          break;
        case 'rename_project':
          oF = this.Epic.getFistInstance('ProjectRename');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          _log2(f, 'check i', $.extend(true, {}, i));
          fv = oF.getDbFieldValues();
          result = this.rest.post("Project/" + this.project_edit_id + "/update", f, fv);
          if (result.SUCCESS === true) {
            this.c_member[Number(this.project_edit_id)].name = fv.name;
            this.Table = {};
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            _log2(f, 'NOPE', {
              result: result,
              i: i,
              r: r
            });
            return [r, i, m];
          }
          break;
        case 'add_team_open':
        case 'add_team_close':
          this.team_add_open = act === 'add_team_open';
          this.invalidateTables(['TeamAdd']);
          break;
        case 'filter_team_toggle':
          this.team_filter_open = !this.team_filter_open;
          this.invalidateTables(['TeamFilter']);
          break;
        case 'filter_team_open':
        case 'filter_team_close':
          this.team_filter_open = act === 'filter_team_open';
          this.invalidateTables(['TeamFilter']);
          break;
        case 'filter_activity_toggle':
          this.activity_filter_open = !this.activity_filter_open;
          this.invalidateTables(['ActivityFilter']);
          break;
        case 'filter_activity_open':
        case 'filter_activity_close':
          this.activity_filter_open = act === 'filter_activity_open';
          this.invalidateTables(['ActivityFilter']);
          break;
        case 'filter_folder_toggle':
          this.folder_filter_open = !this.folder_filter_open;
          this.invalidateTables(['FolderFilter']);
          break;
        case 'filter_folder_open':
        case 'filter_folder_close':
          this.folder_filter_open = act === 'filter_folder_open';
          this.invalidateTables(['FolderFilter']);
          break;
        case 'add_member':
        case 'change_member':
        case 'ping_member':
          if (!p.id) {
            oF = this.Epic.getFistInstance('TeamAddEmail');
            i.call(oF.fieldLevelValidate(p));
            if (i.count() > 0) {
              r.success = 'FAIL';
              return [r, i, m];
            }
            fv = oF.getDbFieldValues();
            result = this.rest.post("User/email/Project/" + this.project_active + "/makemember", f, {
              invited_as: p.as,
              email: fv.email
            });
          } else {
            result = this.rest.post("User/" + p.id + "/Project/" + this.project_active + "/makemember", f, {
              invited_as: p.as
            });
          }
          if (result.SUCCESS === true) {
            if (act === 'ping_member') {
              m.add('PING_MEMBER');
            } else if (result["class"] === 0) {
              m.add('RESTRICTED_MEMBER_ADDED');
            } else if (result["class"] < result.invited_as) {
              m.add('RESTRICTED_MANAGER_ADDED');
            }
            if (result.user_id in this.c_team) {
              $.extend(this.c_team[Number(result.user_id)], result);
            } else {
              this.c_team[Number(result.user_id)] = result;
            }
            me = this.c_member[this.project_active];
            if (result.caller.new_invited_as !== me.invited_as || result.caller.new_class !== me["class"]) {
              if (result.project_transfered) {
                m.add('PROJECT_TRANSFER_SUCCESS');
              }
              me.invited_as = result.caller.new_invited_as;
              me["class"] = result.caller.new_class;
              this.invalidateTables(true);
            }
            this.invalidateTables(['Team', 'User']);
            r.success = 'SUCCESS';
          } else if (act === 'add_member' && !p.id && result.match(/^"Error: REST_404_USERS/)) {
            this.team_add_issue = fv.email;
            r.success = 'NO_SUCH_USER';
            this.invalidateTables(['TeamAdd']);
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          }
          break;
        case 'remove_member':
          result = this.rest.post("User/" + p.id + "/Project/" + this.project_active + "/deletemember", f);
          if (result.SUCCESS === true) {
            this.c_team[Number(p.id)].disposal = 1;
            this.invalidateTables(['Team', 'User']);
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          }
          break;
        case 'clear_clip':
          tbls = ['FORMS', 'PUBLIC', 'PRIVATE', 'Clipboard', 'Folder', 'File'];
          this.clip = {
            folders: {},
            files: {},
            undofolders: [],
            undofiles: []
          };
          this.invalidateTables(tbls);
          r.success = 'SUCCESS';
          break;
        case 'remove_file_from_clip':
          from_file_id = Number(p.id);
          if (from_file_id in this.clip.files) {
            delete this.clip.files[from_file_id];
            this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'File', 'Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'remove_folder_from_clip':
          from_folder_id = Number(p.id);
          if (from_folder_id in this.clip.folders) {
            delete this.clip.folders[from_folder_id];
            this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'Folder', 'Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'remove_undofile_from_clip':
          from_undofile_id = Number(p.id);
          clip_ix = this.clip.undofiles.indexOf(from_undofile_id);
          if (clip_ix !== -1) {
            this.clip.undofiles.splice(clip_ix, 1);
            this.invalidateTables(['Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'remove_undofolder_from_clip':
          from_undofolder_id = Number(p.id);
          clip_ix = this.clip.undofolders.indexOf(from_undofolder_id);
          if (clip_ix !== -1) {
            this.clip.undofolders.splice(clip_ix, 1);
            this.invalidateTables(['Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'folder_to_clip':
          from_id = Number(p.from);
          if (!(from_id in this.clip.folders)) {
            this.clip.folders[from_id] = this.c_folders[from_id];
            this.clip.folders[from_id].project_id = this.project_active;
            this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'Folder', 'Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'file_to_clip':
          from_id = Number(p.from);
          if (!(from_id in this.clip.files)) {
            this.clip.files[from_id] = this.c_files[from_id];
            this.clip.files[from_id].project_id = this.project_active;
            this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'File', 'Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'undofile_to_clip':
          if ((this.clip.undofiles.indexOf(Number(p.from))) === -1) {
            this.clip.undofiles.push(Number(p.from));
            this.invalidateTables(['Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'undofolder_to_clip':
          if ((this.clip.undofolders.indexOf(Number(p.from))) === -1) {
            this.clip.undofolders.push(Number(p.from));
            this.invalidateTables(['Clipboard']);
          }
          r.success = 'SUCCESS';
          break;
        case 'move_file':
          from_file_id = Number(p.from);
          to_folder_id = Number(p.to);
          if (to_folder_id === this.c_folders.FORMS.id) {
            if (this.c_files[from_file_id].ext !== 'pdf') {
              i.add('PDF_ONLY');
              r.success = 'FAIL';
              return [r, i, m];
            }
          }
          data = {
            new_folder_id: to_folder_id
          };
          from_project = this.project_active;
          if (from_file_id in this.clip.files && this.clip.files[from_file_id].project_id !== this.project_active) {
            from_project = this.clip.files[from_file_id].project_id;
            data.new_prid = this.project_active;
          }
          action = p.type === 'version' ? 'version' : 'move';
          result = this.rest.post("Project/" + from_project + "/File/" + from_file_id + "/" + action, f, data);
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          delete this.clip.files[from_file_id];
          if (!('new_prid' in data)) {
            this.c_files[from_file_id].folder_id = to_folder_id;
          }
          this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'File', 'Clipboard']);
          r.success = 'SUCCESS';
          break;
        case 'recover_file':
          from_undofile_id = Number(p.from);
          found = false;
          ref5 = this.c_activities;
          for (k = 0, len1 = ref5.length; k < len1; k++) {
            rec = ref5[k];
            if (rec.id === from_undofile_id) {
              found = true;
              from_file_id = rec.object.id;
              break;
            }
          }
          if (!found) {
            this.rest.makeIssue(i, '"M_MISSING_ACTIVITY"', p.from);
            r.success = 'FAIL';
            return [r, i, m];
          }
          result = this.rest.post("Project/" + this.project_active + "/File/" + from_file_id + "/recover", f);
          if (result.SUCCESS !== true) {
            if (result.match(/^"Error: REST_403_PARENT_DISPOSED/)) {
              r.success = 'PARENT_DISPOSED';
            } else {
              this.rest.makeIssue(i, result);
              r.success = 'FAIL';
            }
            return [r, i, m];
          }
          m.add('RECOVERED_FILE_TO_ORIGINAL_PARENT', [rec.object.name]);
          r.success = 'SUCCESS';
          break;
        case 'recover_file_to':
          from_undofile_id = Number(p.from);
          to_folder_id = Number(p.to);
          found = false;
          ref6 = this.c_activities;
          for (l = 0, len2 = ref6.length; l < len2; l++) {
            rec = ref6[l];
            if (rec.id === from_undofile_id) {
              found = true;
              from_file_id = rec.object.id;
              break;
            }
          }
          if (!found) {
            this.rest.makeIssue(i, '"M_MISSING_ACTIVITY"');
            r.success = 'FAIL';
            return [r, i, m];
          }
          result = this.rest.post("Project/" + this.project_active + "/File/" + from_file_id + "/recover", f, {
            new_foid: to_folder_id
          });
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          clip_ix = this.clip.undofiles.indexOf(from_undofile_id);
          if (clip_ix !== -1) {
            this.clip.undofiles.splice(clip_ix, 1);
          }
          this.c_files[from_file_id] = {
            id: from_file_id,
            folder_id: to_folder_id,
            name: rec.object.name
          };
          this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'File', 'Clipboard']);
          r.success = 'SUCCESS';
          m.add('RECOVERED_FILE_TO_PROJECT', [rec.object.name]);
          break;
        case 'move_folder':
          from_folder_id = Number(p.from);
          to_folder_id = Number(p.to);
          data = {
            new_folder_id: to_folder_id
          };
          from_project = this.project_active;
          if (from_folder_id in this.clip.folders && this.clip.folders[from_folder_id].project_id !== this.project_active) {
            from_project = this.clip.folders[from_folder_id].project_id;
            data.new_prid = this.project_active;
          }
          result = this.rest.post("Project/" + from_project + "/Folder/" + from_folder_id + "/move", f, data);
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          delete this.clip.folders[from_folder_id];
          if (!('new_prid' in data)) {
            this.c_folders[from_folder_id].folder_id = to_folder_id;
          }
          this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'Folder', 'Clipboard']);
          r.success = 'SUCCESS';
          break;
        case 'recover_folder_to':
          from_undofolder_id = Number(p.from);
          to_folder_id = Number(p.to);
          found = false;
          ref7 = this.c_activities;
          for (o = 0, len3 = ref7.length; o < len3; o++) {
            rec = ref7[o];
            if (rec.id === from_undofolder_id) {
              from_folder_id = rec.object.id;
              found = true;
              break;
            }
          }
          if (!found) {
            this.rest.makeIssue(i, '"M_MISSING_ACTIVITY"');
            r.success = 'FAIL';
            return [r, i, m];
          }
          result = this.rest.post("Project/" + this.project_active + "/Folder/" + from_folder_id + "/recover", f, {
            new_foid: to_folder_id
          });
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
            return [r, i, m];
          }
          clip_ix = this.clip.undofolders.indexOf(from_undofolder_id);
          if (clip_ix !== -1) {
            this.clip.undofolders.splice(clip_ix, 1);
          }
          this.c_folders[from_folder_id] = {
            id: from_folder_id,
            folder_id: to_folder_id,
            name: rec.object.name
          };
          this.invalidateTables(['FORMS', 'PUBLIC', 'PRIVATE', 'Folder', 'Clipboard']);
          r.success = 'SUCCESS';
          m.add('RECOVERED_FOLDER_TO_PROJECT', [rec.object.name]);
          break;
        case 'recover_folder':
          from_undofolder_id = Number(p.from);
          found = false;
          ref8 = this.c_activities;
          for (q = 0, len4 = ref8.length; q < len4; q++) {
            rec = ref8[q];
            if (rec.id === from_undofolder_id) {
              from_folder_id = rec.object.id;
              found = true;
              break;
            }
          }
          if (!found) {
            this.rest.makeIssue(i, '"M_MISSING_ACTIVITY"');
            r.success = 'FAIL';
            return [r, i, m];
          }
          result = this.rest.post("Project/" + this.project_active + "/Folder/" + from_folder_id + "/recover", f);
          if (result.SUCCESS !== true) {
            if (result.match(/^"Error: REST_403_PARENT_DISPOSED/)) {
              r.success = 'PARENT_DISPOSED';
            } else {
              this.rest.makeIssue(i, result);
              r.success = 'FAIL';
            }
            return [r, i, m];
          }
          m.add('RECOVERED_FOLDER_TO_ORIGINAL_PARENT', [rec.object.name]);
          r.success = 'SUCCESS';
          break;
        case 'start_os_upload':
          parent_folder = (ref9 = p.id) != null ? ref9 : this.upload_folder;
          accept = parent_folder === this.c_folders.FORMS.id ? ['pdf'] : [];
          drop = new window.EpicMvc.Extras.DropOSDialog(p.input_obj, this.project_active, parent_folder, window.EpicMvc.Extras[p.callback_class], accept);
          if (drop.fileHandler() === false) {
            r.success = 'FAIL';
          } else {
            r.success = 'SUCCESS';
          }
          break;
        case 'start_upload':
          is_version = p.type === 'version';
          parent_folder = p.type !== 'version' ? Number(p.to) : this.c_files[p.to].folder_id;
          accept = parent_folder === this.c_folders.FORMS.id ? ['pdf'] : [];
          if (is_version) {
            items = (function() {
              var len5, ref10, results1, s;
              ref10 = p.event.dataTransfer.items;
              results1 = [];
              for (s = 0, len5 = ref10.length; s < len5; s++) {
                rec = ref10[s];
                if (rec.kind === 'file') {
                  results1.push(rec);
                }
              }
              return results1;
            })();
            entry = items[0].webkitGetAsEntry();
            if (items.length !== 1 || entry.isDirectory) {
              is_version = false;
            } else if (this.c_files[p.to].ext.toLowerCase() !== (entry.name.split('.')).pop().toLowerCase()) {
              r.success = 'FAIL';
              i.add('FILE_VERSION_EXTENSION_NOT', [this.c_files[p.to].ext]);
              return [r, i, m];
            }
          }
          drop_type = !is_version ? false : {
            parent_id: Number(p.to),
            type: 'version'
          };
          cb = window.EpicMvc.Extras[p.callback_class];
          drop = new window.EpicMvc.Extras.Drop(this.project_active, parent_folder, cb, accept, drop_type);
          if ((drop.dropHandler(p.event)) === false) {
            r.success = 'FAIL';
          } else {
            r.success = 'SUCCESS';
          }
          break;
        case 'choose_tab_profile':
          if (this.tab_profile !== p.tab) {
            this.tab_profile = p.tab;
            this.invalidateTables(['Options']);
          }
          r.success = 'SUCCESS';
          break;
        case 'stop_watch_project':
          prid = Number(p.id);
          result = this.rest.post("User/me/Project/" + prid + "/deletemember", f, {});
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          } else {
            delete this.c_member[prid];
            if (prid === this.project_active) {
              this._resetProjectCache(true);
            }
            this.invalidateTables(true);
            r.success = 'SUCCESS';
          }
          break;
        case 'start_watch_project':
          prid = Number(p.id);
          result = this.rest.post("User/me/Project/" + prid + "/makeadminmember", f);
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          } else {
            this.c_member[prid] = {
              name: (ref10 = p.name) != null ? ref10 : 'MISSING',
              project_id: prid,
              invited_as: 30,
              type: 1,
              pending: true
            };
            table = {
              project: this.c_member[prid],
              folders: {},
              files: {},
              file_annot: [],
              members: {},
              activities: []
            };
            this.cache.AddProject(result.project_id, table);
            this.invalidateTables(['Member', 'MemberExtended']);
            r.success = 'SUCCESS';
          }
          break;
        case 'activate_version':
          result = this.rest.post("Project/" + this.project_active + "/File/" + p.current + "/revertversion", f, {
            revert_file_id: p.id
          });
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          } else {
            result.versions[0].version_name = 'TBD';
            this.c_version_child[p.current].unshift(result.versions[0]);
            this.invalidateTables(['File', 'FORMS', 'PUBLIC', 'PRIVATE']);
            r.success = 'SUCCESS';
          }
          break;
        case 'delete_version':
          result = this.rest.post("Project/" + this.project_active + "/File/" + p.id + "/delete", f, {});
          if (result.SUCCESS !== true) {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          } else {
            r.success = 'SUCCESS';
          }
          break;
        case 'notify_send':
          oF = this.Epic.getFistInstance('ComposeNotify');
          i.call(oF.fieldLevelValidate(p));
          if (i.count() > 0) {
            r.success = 'FAIL';
            return [r, i, m];
          }
          fv = oF.getDbFieldValues();
          fv.link_flag = fv.link_flag === '1' ? 'YES' : 'NO';
          fv.link_hash = this.project_active ? "folders-" + this.project_active : '';
          if (p.user_list == null) {
            p.user_list = {};
          }
          if (fv.send_option === 'list') {
            fv.user_list = ((function() {
              var results1;
              results1 = [];
              for (usid in p.user_list) {
                results1.push(usid);
              }
              return results1;
            })()).join(',');
          }
          if (fv.send_option === 'list' && !fv.user_list.length) {
            i.add('NOTHING_SELECTED');
            r.success = 'FAIL';
            return [r, i, m];
          }
          result = this.rest.post("Project/" + this.project_active + "/emailmembers", f, fv);
          if (result.SUCCESS === true) {
            m.add('SUCCESS', [result.recipient_count]);
            r.success = 'SUCCESS';
          } else {
            this.rest.makeIssue(i, result);
            r.success = 'FAIL';
          }
          break;
        default:
          return Folder.__super__.action.call(this, act, p);
      }
      return [r, i, m];
    };

    Folder.prototype.loadTable = function(tbl_nm) {
      var defaults, dt, f, files, folders, i, id, ix, j, k, l, len, len1, len2, len3, len4, len5, len6, map, me_id, member, memberRecs, my_id, my_rec, new_rec, new_row, nm, now, o, perm, q, rec, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, row, s, t, table, timestamp, undofiles, undofolders, usid, view_id;
      f = 'M:Folder.loadTable:' + tbl_nm;
      this._getProjectData();
      switch (tbl_nm) {
        case 'Me':
          table = [];
          defaults = {
            is_manager: '',
            is_owner: '',
            is_admin: ''
          };
          my_rec = (this.Epic.getViewTable('User/Me'))[0];
          my_id = my_rec.id;
          new_row = defaults;
          if ((member = this.c_team[Number(my_id)])) {
            new_row = $.extend(true, {}, member, defaults);
            map = this.rest.choices().members.invited_as[new_row.invited_as];
            new_row.invited_as_nice = map.nice;
            new_row.invited_as_token = map.token;
            if (new_row.invited_as_token === 'manager') {
              new_row.is_manager = 'yes';
            }
            if (new_row.invited_as_token === 'owner') {
              new_row.is_owner = 'yes';
            }
            if (new_row.invited_as_token === 'watcher') {
              new_row.is_admin = 'yes';
            }
          }
          table.push(new_row);
          this.Table[tbl_nm] = table;
          break;
        case 'Clipboard':
          files = [];
          ref = this.clip.files;
          for (ix in ref) {
            rec = ref[ix];
            new_row = $.extend({}, rec);
            new_row.icon_ext = window.extToIconPostfix(new_row.name, new_row.ext);
            files.push(new_row);
          }
          undofiles = [];
          ref1 = this.clip.undofiles;
          for (j = 0, len = ref1.length; j < len; j++) {
            ix = ref1[j];
            ref2 = this.c_activities;
            for (k = 0, len1 = ref2.length; k < len1; k++) {
              rec = ref2[k];
              if (rec.id === ix) {
                undofiles.push({
                  id: rec.id,
                  name: rec.object.name,
                  icon_ext: window.extToIconPostfix(rec.object.name)
                });
                break;
              }
            }
          }
          undofolders = [];
          ref3 = this.clip.undofolders;
          for (l = 0, len2 = ref3.length; l < len2; l++) {
            ix = ref3[l];
            ref4 = this.c_activities;
            for (o = 0, len3 = ref4.length; o < len3; o++) {
              rec = ref4[o];
              if (rec.id === ix) {
                undofolders.push({
                  id: rec.id,
                  name: rec.object.name
                });
                break;
              }
            }
          }
          table = [
            {
              is_empty: '',
              Folder: (function() {
                var ref5, results1;
                ref5 = this.clip.folders;
                results1 = [];
                for (ix in ref5) {
                  rec = ref5[ix];
                  results1.push(rec);
                }
                return results1;
              }).call(this),
              File: files,
              UndoFolder: undofolders,
              UndoFile: undofiles
            }
          ];
          if (table[0].Folder.length === 0 && files.length === 0 && undofolders.length === 0 && undofiles.length === 0) {
            table[0].is_empty = 'yes';
          }
          this.Table[tbl_nm] = table;
          break;
        case 'User':
          table = [];
          results = this._getUserRecs().users;
          for (q = 0, len4 = results.length; q < len4; q++) {
            row = results[q];
            new_row = $.extend(true, {}, row, {
              on_team: ''
            });
            if (new_row.id in this.c_team) {
              new_row.on_team = 'yes';
            }
            table.push(new_row);
          }
          this.Table[tbl_nm] = table;
          break;
        case 'TeamAdd':
          table = [];
          table.push({
            issue: this.team_add_issue === false ? '' : 'yes',
            issue_email: this.team_add_issue,
            open: this.team_add_open === true ? 'yes' : ''
          });
          this.Table[tbl_nm] = table;
          break;
        case 'TeamFilter':
          table = [];
          table.push({
            open: this.team_filter_open === true ? 'yes' : ''
          });
          this.Table[tbl_nm] = table;
          break;
        case 'ActivityFilter':
          table = [];
          table.push({
            open: this.activity_filter_open === true ? 'yes' : ''
          });
          this.Table[tbl_nm] = table;
          break;
        case 'FolderFilter':
          table = [];
          table.push({
            open: this.folder_filter_open === true ? 'yes' : ''
          });
          this.Table[tbl_nm] = table;
          break;
        case 'FolderFilterList':
          folders = [];
          files = [];
          if (this.cache_pending !== true) {
            ref5 = this.c_folders;
            for (id in ref5) {
              rec = ref5[id];
              if (rec.id !== 0 && rec.id !== -1 && rec.folder_id !== 0) {
                folders.push(rec);
              }
            }
            ref6 = this.c_files;
            for (id in ref6) {
              rec = ref6[id];
              if (rec.id !== 0 && rec.folder_id !== 0) {
                files.push($.extend({}, rec, {
                  icon_ext: window.extToIconPostfix(rec.name, rec.ext)
                }));
              }
            }
          }
          this.Table[tbl_nm] = [
            {
              Folder: folders,
              File: files
            }
          ];
          break;
        case 'Team':
          my_rec = (this.Epic.getViewTable('User/Me'))[0];
          my_id = my_rec.id;
          results = [];
          now = new Date().getTime();
          ref7 = this.c_team;
          for (usid in ref7) {
            rec = ref7[usid];
            if (!(rec.invited_as !== 30)) {
              continue;
            }
            row = $.extend({}, rec);
            row.recent = Date.parse(rec.modified) > now - 900 ? 'yes' : '';
            if (row.email == null) {
              row.email = '';
            }
            map = this.rest.choices().members.invited_as[rec.invited_as];
            row.invited_as_nice = map.nice;
            row.invited_as_token = map.token;
            row.is_me = rec.user_id === my_id ? 'yes' : '';
            row.is_project_restricted = rec["class"] === 0 ? 'yes' : '';
            row.is_manager_restricted = rec["class"] < rec.invited_as ? 'yes' : '';
            results.push(row);
          }
          results.sort(function(a, b) {
            var a_name, b_name;
            if (a.invited_as !== b.invited_as) {
              return b.invited_as - a.invited_as;
            }
            a_name = a.last_name + a.first_name;
            b_name = b.last_name + b.first_name;
            if (a_name === b_name) {
              return 0;
            } else if (a_name > b_name) {
              return 1;
            } else {
              return -1;
            }
          });
          this.Table[tbl_nm] = results;
          break;
        case 'Template':
          results = [];
          ref8 = this._getMemberRecs();
          for (id in ref8) {
            rec = ref8[id];
            if (!(rec.type === 0)) {
              continue;
            }
            row = $.extend({}, rec, {
              active: false,
              is_manager: '',
              is_owner: 'yes',
              is_pending: ''
            });
            if (rec.project_id === this.project_active) {
              row.active = true;
            }
            if (rec.pending === true) {
              row.is_pending = 'yes';
            }
            results.push(row);
          }
          results.sort(function(a, b) {
            if (a.name.toLowerCase() === b.name.toLowerCase()) {
              return 0;
            } else if (a.name !== '_WELCOME' && (b.name === '_WELCOME' || a.name.toLowerCase() > b.name.toLowerCase())) {
              return 1;
            } else {
              return -1;
            }
          });
          this.Table[tbl_nm] = results;
          break;
        case 'Member':
        case 'MemberExtended':
          my_rec = (this.Epic.getViewTable('User/Me'))[0];
          my_id = my_rec.id;
          memberRecs = tbl_nm === 'Member' ? this._getMemberRecs() : this._getMemberRecsExtended();
          results = [];
          for (id in memberRecs) {
            rec = memberRecs[id];
            if (!(rec.type === this.project_type)) {
              continue;
            }
            row = $.extend({}, rec, {
              active: false,
              is_manager: '',
              is_owner: '',
              is_admin: '',
              is_pending: '',
              is_exposed: ''
            });
            if (rec.project_id === this.project_active) {
              row.active = true;
            }
            if (rec["class"] === 10) {
              row.is_manager = 'yes';
            }
            if (rec.invited_as === 20) {
              row.is_owner = 'yes';
            }
            if (rec["class"] === 30) {
              row.is_admin = 'yes';
            }
            if (rec.pending === true) {
              row.is_pending = 'yes';
            }
            if (rec.contact_flag === 1) {
              row.is_exposed = 'yes';
            }
            row.is_project_restricted = rec["class"] === 0 ? 'yes' : '';
            row.is_manager_restricted = rec["class"] < rec.invited_as ? 'yes' : '';
            results.push(row);
          }
          results.sort(function(a, b) {
            if (a.name.toLowerCase() === b.name.toLowerCase()) {
              return 0;
            } else if (a.name.toLowerCase() > b.name.toLowerCase()) {
              return 1;
            } else {
              return -1;
            }
          });
          this.Table[tbl_nm] = results;
          break;
        case 'Options':
          view_id = this.folder_view_id[this.project_active];
          table = [
            {
              cache_pending: this.cache_pending === true ? 'yes' : '',
              cache_pending_project: ((ref9 = this.c_member) != null ? (ref10 = ref9[this.project_active]) != null ? ref10.pending : void 0 : void 0) === true ? 'yes' : '',
              type: this.project_type === 0 ? 'Template' : this.project_type === 1 ? 'Project' : 'Undefined',
              is_template: this.project_type === 0 ? 'yes' : '',
              active_project: this.project_active,
              UploadEndpoint: this._getUploadEndpoint() + (this.project_active + "/" + this.upload_folder),
              is_root: view_id ? '' : 'yes',
              active_folder: (ref11 = this.folder_view_id[this.project_active]) != null ? ref11 : 0,
              can_edit: '',
              can_add: '',
              can_upload: '',
              hide_FORMS: '',
              hide_PRIVATE: '',
              hide_PUBLIC: '',
              is_upload_FORMS: '',
              file_signed_url: this.file_signed_url ? this.file_signed_url : ''
            }
          ];
          ref12 = this.tab_profile_choices;
          for (s = 0, len5 = ref12.length; s < len5; s++) {
            nm = ref12[s];
            table[0]['tab_profile_' + nm] = this.tab_profile === nm ? 'yes' : '';
          }
          if (!this.cache_pending) {
            $.extend(table[0], {
              is_public: view_id && this.c_folders[view_id]["public"] ? 'yes' : '',
              is_private: view_id && !this.c_folders[view_id]["public"] ? 'yes' : ''
            });
          }
          if (view_id && !this.cache_pending) {
            perm = this.c_folders[view_id].perm;
            switch (perm) {
              case 2:
                table[0].can_edit = 'yes';
                table[0].can_add = 'yes';
                table[0].can_upload = 'yes';
                break;
              case 3:
                table[0].can_add = 'yes';
                table[0].can_upload = 'yes';
                me_id = (this.Epic.getViewTable('User/Me'))[0].id;
                if (this.c_folders[view_id].user_id === me_id) {
                  table[0].can_upload = 'yes';
                }
                break;
              case 4:
                table[0].can_upload = 'yes';
            }
          } else {
            if (!this.root_open.FORMS) {
              table[0].hide_FORMS = 'yes';
            }
            if (!this.root_open.PRIVATE) {
              table[0].hide_PRIVATE = 'yes';
            }
            if (!this.root_open.PUBLIC) {
              table[0].hide_PUBLIC = 'yes';
            }
            if (this.c_folders.PUBLIC.perm === 2) {
              table[0].can_upload = 'yes';
            }
          }
          if (this.upload_folder === this.c_folders.FORMS.id) {
            table[0].is_upload_FORMS = 'yes';
          }
          this.Table[tbl_nm] = table;
          break;
        case 'FORMS':
        case 'PUBLIC':
        case 'PRIVATE':
          table = [
            {
              Folder: this.root_open[tbl_nm] ? this._getFolderTable(this.c_folders[tbl_nm].id) : [],
              File: this.root_open[tbl_nm] ? this._getFileTable(this.c_folders[tbl_nm].id) : [],
              Crumb: [
                {
                  name: tbl_nm
                }
              ],
              Options: [
                {
                  active_folder: this.c_folders[tbl_nm].id
                }
              ],
              active_folder: this.c_folders[tbl_nm].id,
              hide: this.root_open[tbl_nm] ? '' : 'yes',
              can_edit: '',
              can_add: '',
              can_upload: ''
            }
          ];
          table[0].is_empty = table[0].Folder.length + table[0].File.length === 0;
          perm = this.c_folders[tbl_nm].perm;
          switch (perm) {
            case 2:
              table[0].can_edit = 'yes';
              table[0].can_add = 'yes';
              table[0].can_upload = 'yes';
              break;
            case 3:
              table[0].can_add = 'yes';
              table[0].can_upload = 'yes';
              me_id = (this.Epic.getViewTable('User/Me'))[0].id;
              if (this.c_folders[tbl_nm].user_id === me_id) {
                table[0].can_upload = 'yes';
              }
              break;
            case 4:
              table[0].can_upload = 'yes';
          }
          this.Table[tbl_nm] = table;
          break;
        case 'Project':
          results = this.project;
          results.url = "" + window.location.origin + window.location.pathname + "#folders-" + this.project.id;
          this.Table[tbl_nm] = [results];
          break;
        case 'Folder':
          this.Table[tbl_nm] = this._getFolderTable(this.folder_view_id[this.project_active]);
          break;
        case 'File':
          this.Table[tbl_nm] = this._getFileTable(this.folder_view_id[this.project_active]);
          break;
        case 'Crumb':
          if (this.project_active && !this.cache_pending) {
            results = [id = (ref13 = this.folder_view_id[this.project_active]) != null ? ref13 : 0];
            while ((id = this.c_folders[id].folder_id) !== 0) {
              if (this.c_folders[id].folder_id !== 0) {
                results.push(id);
              }
            }
            if (this.folder_view_id[this.project_active]) {
              results.push(0);
            }
            this.Table[tbl_nm] = (function() {
              var ref14, results1, t;
              results1 = [];
              for (i = t = ref14 = results.length - 1; ref14 <= 0 ? t <= 0 : t >= 0; i = ref14 <= 0 ? ++t : --t) {
                results1.push(this.c_folders[results[i]]);
              }
              return results1;
            }).call(this);
          } else {
            this.Table[tbl_nm] = [];
          }
          break;
        case 'Details':
          results = [this.c_folders[(ref14 = this.folder_view_id[this.project_active]) != null ? ref14 : 0]];
          this.Table[tbl_nm] = results;
          break;
        case 'FolderDetails':
          results = [this.c_folders[this.folder_edit_id]];
          this.Table[tbl_nm] = results;
          break;
        case 'FileDetails':
          results = [this.c_files[this.file_edit_id]];
          this.Table[tbl_nm] = results;
          break;
        case 'Notice':
          results = [];
          if (this.c_notice_text !== false) {
            results.push({
              text: this.c_notice_text
            });
          }
          this.c_notice_text = false;
          this.Table[tbl_nm] = results;
          break;
        case 'Activity':
          results = [];
          ref15 = this.c_activities;
          for (t = 0, len6 = ref15.length; t < len6; t++) {
            rec = ref15[t];
            timestamp = Date.parse(rec.created);
            dt = new Date(timestamp);
            new_rec = {
              created: rec.created,
              verb: rec.verb,
              timestamp: timestamp,
              date: window.make_date(dt),
              time: window.make_time(dt),
              user_name: rec.actor.name,
              table: rec.object.type,
              description: rec.object.name,
              destination: '',
              is_recoverable: '',
              id: rec.id
            };
            if (rec.object.type === 'file' || rec.object.type === 'folder') {
              if (rec.verb === 'Removed') {
                new_rec.is_recoverable = 'yes';
              }
            }
            if (rec.verb === 'Added' && rec.object.type === 'file' && rec.object.file_type === 0 && ((ref16 = rec.target) != null ? ref16.type : void 0) === 'file') {
              new_rec.table = 'version';
              new_rec.destination = rec.target.name;
            }
            results.push(new_rec);
          }
          results.sort(function(a, b) {
            if (a.timestamp === b.timestamp) {
              return 0;
            } else if (a.timestamp < b.timestamp) {
              return 1;
            } else {
              return -1;
            }
          });
          this.Table[tbl_nm] = results.slice(0, 100);
          break;
        default:
          Folder.__super__.loadTable.call(this, tbl_nm);
      }
    };

    Folder.prototype.fistLoadData = function(oFist) {
      var f, id, member, ref, results1;
      f = 'M:Folder.fistLoadData:' + oFist.getFistNm();
      _log2(f, 'oFist/defs', oFist, oFist.getFieldsDefs());
      switch (oFist.getFistNm()) {
        case 'Folder':
          if (this.folder_edit_id !== false) {
            return oFist.setFromDbValues(this.c_folders[this.folder_edit_id]);
          } else {
            return oFist.clearValues();
          }
          break;
        case 'File':
          if (this.file_edit_id !== false) {
            return oFist.setFromDbValues(this.c_files[this.file_edit_id]);
          } else {
            return oFist.clearValues();
          }
          break;
        case 'ProjectRename':
          if (this.project_edit_id !== false) {
            ref = this._getMemberRecs();
            results1 = [];
            for (id in ref) {
              member = ref[id];
              if (member.project_id === this.project_edit_id) {
                oFist.setFromDbValues(member);
                break;
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          } else {
            return oFist.clearValues();
          }
          break;
        case 'ComposeNotify':
          break;
        case 'Project':
        case 'TeamAddEmail':
        case 'Template':
        case 'CloneProject':
          break;
        default:
          return Folder.__super__.fistLoadData.call(this, oFist);
      }
    };

    Folder.prototype.fistGetFieldChoices = function(oFist, field) {
      var f, rec, results, templates;
      f = 'M:Folder.fistGetFieldChoices:' + oFist.getFistNm() + ':' + field;
      _log2(f, oFist);
      switch (field) {
        case 'Template':
          templates = this.rest.get('Template', f);
          results = (function() {
            var j, len, ref, results1;
            ref = templates.templates;
            results1 = [];
            for (j = 0, len = ref.length; j < len; j++) {
              rec = ref[j];
              if (rec.name !== '_WELCOME') {
                results1.push(rec);
              }
            }
            return results1;
          })();
          results.sort(function(a, b) {
            if (a.name === b.name) {
              return 0;
            } else if (a.name !== '_EMPTY' && (b.name === '_EMPTY' || a.name > b.name)) {
              return 1;
            } else {
              return -1;
            }
          });
          results[0].name = oFist.getFieldsDefs()[field].custom.first;
          return {
            options: (function() {
              var j, len, results1;
              results1 = [];
              for (j = 0, len = results.length; j < len; j++) {
                rec = results[j];
                results1.push(rec.name);
              }
              return results1;
            })(),
            values: (function() {
              var j, len, results1;
              results1 = [];
              for (j = 0, len = results.length; j < len; j++) {
                rec = results[j];
                results1.push(String(rec.id));
              }
              return results1;
            })()
          };
        default:
          return Folder.__super__.fistGetFieldChoices.call(this, oFist, field);
      }
    };

    Folder.prototype.UpdateProjectListAsync = function(adds, removes) {
      var click, extra, f, j, len, prid, ref, ref1, tbl_list;
      f = 'M:Folder.UpdateProjectListAsync';
      _log2(f, 'adds,removes', adds.join(','), removes.join(','), 'project_active=', this.project_active);
      this.c_member = this.cache.GetProjectList();
      for (j = 0, len = adds.length; j < len; j++) {
        prid = adds[j];
        if (this.c_member[prid]["class"] === 0) {
          extra = this.cache_pending === true ? 'exists' : 'was added';
          this.c_notice_text = 'A Project ' + extra + ' where you have restrictions';
          this.invalidateTables(['Notice']);
          break;
        }
      }
      click = false;
      if (this.cache_pending === true) {
        if (this.project_active) {
          this.UpdateProjectAsync(this.project_active, {});
        }
        click = 'Async.loaded';
        tbl_list = true;
      } else {
        tbl_list = ['Member', 'Template', 'Options'];
        if (ref = this.project_active, indexOf.call(adds, ref) >= 0) {
          click = 'Async.reset_project';
          this._resetProjectCache();
          this._getProjectData();
        } else if (ref1 = this.project_active, indexOf.call(removes, ref1) >= 0) {
          click = 'Async.deleted_project';
          this._resetProjectCache();
        }
      }
      this.cache_pending = false;
      if (click !== false) {
        this.invalidateTables(true, ['TeamAdd']);
        return this.Epic.makeClick(false, click, {
          name: 'TODO'
        }, false);
      } else {
        return this.invalidateTables(tbl_list);
      }
    };

    Folder.prototype.UpdateProjectAsync = function(prid, msgs) {
      var f;
      f = 'M:Folder.UpdateProjectAsync';
      _log2(f, 'prid/msgs', prid, msgs, 'project_active=', this.project_active);
      this._getProjectData();
      this.invalidateTables(true, ['TeamAdd']);
    };

    Folder.prototype._getFolderTable = function(parent_folder_id) {
      var def_can_add, def_can_edit, def_can_upload, f, id, me_id, me_rec, meid, myself, new_row, now, perm, perm_check, perm_map, perms, recent, ref, ref1, ref2, results, row, team_rec;
      f = 'M:Folder._getFolderTable:' + parent_folder_id;
      results = [];
      if (parent_folder_id === -1) {
        return results;
      }
      def_can_edit = '';
      def_can_add = '';
      def_can_upload = '';
      perm_check = false;
      perm = this.c_folders[parent_folder_id].perm;
      switch (perm) {
        case 2:
          def_can_edit = 'yes';
          def_can_add = 'yes';
          def_can_upload = 'yes';
          break;
        case 3:
          def_can_add = 'yes';
          def_can_upload = 'yes';
          me_id = (this.Epic.getViewTable('User/Me'))[0].id;
          perm_check = true;
          break;
        case 4:
          def_can_upload = 'yes';
      }
      perm_map = {
        3: 'have_collab',
        4: 'have_contrib',
        5: 'have_viewer'
      };
      now = new Date().getTime();
      recent = now - 300;
      myself = (this.Epic.getViewTable('Directory/Me'))[0] || {
        invited_as: 0
      };
      perms = myself.invited_as < 10 ? {} : this._getTeamPerms();
      ref = this.c_folders;
      for (id in ref) {
        row = ref[id];
        if (!(row.folder_id === parent_folder_id)) {
          continue;
        }
        if ((Number(id)) in this.clip.folders) {
          continue;
        }
        new_row = $.extend(true, {}, row, {
          drawer_open: '',
          activity_open: '',
          actions_open: '',
          users_open: '',
          edit: '',
          Team: [],
          can_edit: def_can_edit,
          can_add: def_can_add,
          can_upload: def_can_upload
        });
        if (row.id === this.toggle_item.id) {
          new_row[this.toggle_item.type + '_open'] = 'yes';
        }
        ref1 = this.c_team;
        for (meid in ref1) {
          me_rec = ref1[meid];
          if (!(me_rec.invited_as < 10)) {
            continue;
          }
          if (myself.invited_as < 10) {
            if (me_rec.user_id !== myself.user_id) {
              continue;
            }
            if (perms[id] == null) {
              perms[id] = {};
            }
            if (row["public"] === 0 || (row["public"] === 1 && row.perm < 5)) {
              perms[id][meid] = row.perm;
            }
          }
          team_rec = {
            id: meid,
            perm: 0,
            modified: me_rec.modified,
            time_stamp: me_rec.time_stamp,
            have_none: 'yes',
            have_viewer: '',
            have_contrib: '',
            have_collab: '',
            name: this.c_team[meid].first_name + ' ' + this.c_team[meid].last_name
          };
          if (perms != null ? (ref2 = perms[id]) != null ? ref2[meid] : void 0 : void 0) {
            team_rec[perm_map[perms[id][meid]]] = 'yes';
            team_rec.have_none = '';
            team_rec.perm = perms[id][meid];
          }
          new_row.Team.push(team_rec);
        }
        if (row.id === this.folder_edit_id) {
          new_row.edit = 'yes';
        }
        if (new_row.edit || new_row[this.toggle_item.type + '_open'] === 'yes') {
          new_row.drawer_open = 'yes';
        }
        if (perm_check && row.user_id === me_id) {
          new_row.can_edit = 'yes';
        }
        results.push(new_row);
        new_row.Team.sort(function(a, b) {
          if (a.name === b.name) {
            return 0;
          } else if (a.name > b.name) {
            return 1;
          } else {
            return -1;
          }
        });
      }
      return results.sort(function(a, b) {
        if (a.name === b.name) {
          return 0;
        } else if (a.name > b.name) {
          return 1;
        } else {
          return -1;
        }
      });
    };

    Folder.prototype._getFileTable = function(parent_folder_id) {
      var anid, annot_row, def_can_edit, f, id, j, k, len, len1, me_id, new_row, perm, perm_check, ref, ref1, ref2, ref3, ref4, results, row, urec, ver_row, vr_rec;
      f = 'M:Folder._getFileTable:' + parent_folder_id;
      _log2(f, this.toggle_item, this.c_folders[parent_folder_id]);
      results = [];
      if (parent_folder_id === -1) {
        return results;
      }
      def_can_edit = '';
      perm_check = false;
      perm = this.c_folders[parent_folder_id].perm;
      switch (perm) {
        case 2:
          def_can_edit = 'yes';
          break;
        case 3:
          me_id = (this.Epic.getViewTable('User/Me'))[0].id;
          perm_check = true;
      }
      results = [];
      ref = this.upload_file;
      for (id in ref) {
        row = ref[id];
        if (!(parent_folder_id === Number(row.parent_id))) {
          continue;
        }
        if (row.modified == null) {
          row.modified = '';
        }
        new_row = $.extend(true, {}, row, {
          drawer_open: '',
          activity_open: '',
          actions_open: '',
          users_open: '',
          annot_open: '',
          edit: '',
          pending: 'yes',
          uploading: 'yes',
          has_error: '',
          can_edit: '',
          has_versions: '',
          versions_open: ''
        });
        new_row.size = Number(row.total);
        if (row.subevent === 'END') {
          new_row.uploading = '';
        }
        if (((ref1 = this.upload_file[id]) != null ? ref1.id : void 0) === -1) {
          new_row.has_error = 'yes';
        }
        new_row.icon_ext = window.extToIconPostfix(new_row.name, new_row.ext);
        results.push(new_row);
      }
      ref2 = this.c_files;
      for (id in ref2) {
        row = ref2[id];
        if (!(row.folder_id === parent_folder_id && row.type === 0)) {
          continue;
        }
        if ((Number(id)) in this.clip.files) {
          continue;
        }
        new_row = $.extend(true, {}, row, {
          drawer_open: '',
          activity_open: '',
          actions_open: '',
          users_open: '',
          annot_open: '',
          edit: '',
          pending: '',
          uploading: '',
          versions_open: '',
          can_edit: def_can_edit,
          Annot: [],
          Version: [],
          has_versions: ''
        });
        if (row.id === this.toggle_item.id) {
          new_row[this.toggle_item.type + '_open'] = 'yes';
        }
        if (row.id === this.file_edit_id) {
          new_row.edit = 'yes';
        }
        if (new_row.edit || new_row[this.toggle_item.type + '_open'] === 'yes') {
          new_row.drawer_open = 'yes';
        }
        new_row.icon_ext = window.extToIconPostfix(new_row.name, new_row.ext);
        if (perm_check && row.user_id === me_id) {
          new_row.can_edit = 'yes';
        }
        if (row.type === 0 && row.file_id !== null) {
          new_row.has_versions = 'yes';
        }
        if (row.id in this.c_annot_child) {
          ref3 = this.c_annot_child[row.id];
          for (j = 0, len = ref3.length; j < len; j++) {
            anid = ref3[j];
            if (!(anid in this.c_files)) {
              continue;
            }
            annot_row = $.extend(true, {}, this.c_files[anid], {
              can_edit: def_can_edit,
              edit: ''
            });
            if (annot_row.id === this.file_edit_id) {
              annot_row.edit = 'yes';
            }
            annot_row.icon_ext = window.extToIconPostfix(annot_row.name, annot_row.ext);
            if (perm_check && annot_row.user_id === me_id) {
              new_row.can_edit = 'yes';
            }
            urec = this.c_team[annot_row.user_id] || {
              last_name: 'Member',
              first_name: 'Non'
            };
            annot_row.last_name = urec.last_name;
            annot_row.first_name = urec.first_name;
            annot_row.modified_int = Date.parse(annot_row.modified);
            new_row.Annot.push(annot_row);
          }
          new_row.Annot.sort(function(a, b) {
            return b.modified_int - a.modified_int;
          });
        }
        if (new_row.versions_open === 'yes') {
          this._getFileVersions(this.project_active, new_row.id);
        }
        if (row.id in this.c_version_child) {
          ref4 = this.c_version_child[row.id];
          for (k = 0, len1 = ref4.length; k < len1; k++) {
            vr_rec = ref4[k];
            ver_row = $.extend(true, {}, vr_rec, {
              is_active: ''
            });
            if (ver_row.id in this.c_files) {
              ver_row.is_active = 'yes';
            }
            ver_row.icon_ext = window.extToIconPostfix(ver_row.name, ver_row.ext);
            urec = this.c_team[ver_row.user_id] || {
              last_name: 'Member',
              first_name: 'Non'
            };
            ver_row.last_name = urec.last_name;
            ver_row.first_name = urec.first_name;
            new_row.Version.push(ver_row);
          }
        }
        results.push(new_row);
      }
      return results.sort(function(a, b) {
        if (a.name === b.name) {
          return 0;
        } else if (a.name > b.name) {
          return 1;
        } else {
          return -1;
        }
      });
    };

    Folder.prototype._getProjectData = function() {
      var f, fid, file, id, ref, ref1, ref2, row, tables;
      f = 'M:Folder._getProjectData';
      if (!(this.project_active && this.cache)) {
        return;
      }
      if (((ref = this.project) != null ? ref.id : void 0) !== this.project_active) {
        this._resetProjectCache();
      }
      if (this.project === null) {
        tables = this.cache.GetProject(this.project_active);
        _log2(f, 'tables', tables);
        if (tables === false) {
          this.project_active = false;
          return;
        }
        if (tables === true) {
          return;
        }
        this.cache_pending = false;
        this.project = tables.project;
        this.c_folders = tables.folders;
        if (!(0 in this.c_folders)) {
          $.extend(true, this.c_folders, {
            0: {
              id: 0,
              name: this.project.name,
              folder_id: 0
            },
            FORMS: {
              id: -1
            },
            PUBLIC: {
              id: -1
            },
            PRIVATE: {
              id: -1
            }
          });
          ref1 = this.c_folders;
          for (id in ref1) {
            row = ref1[id];
            if (row.id !== 0) {
              if (row.folder_id === 0) {
                this.c_folders[row.name] = row;
              }
            }
          }
        }
        this.c_files = tables.files;
        this.c_annot_child = tables.file_annot;
        this.c_team = tables.members;
        this.c_activities = tables.activities;
      }
      ref2 = this.upload_response;
      for (fid in ref2) {
        file = ref2[fid];
        if (file.id in this.c_files) {
          delete this.upload_file[fid];
          delete this.upload_response[fid];
        }
      }
      if ((this.folder_view_id[this.project_active] != null) && !this.c_folders[this.folder_view_id[this.project_active]]) {
        delete this.folder_view_id[this.project_active];
        this.invalidateTables(true, ['TeamAdd']);
        return this.Epic.makeClick(false, 'Async.deleted_folder', {
          name: 'TODO'
        }, false);
      }
    };

    Folder.prototype._getUploadEndpoint = function() {
      return window.EpicMvc.Extras.options.UploadEndpoint;
    };

    Folder.prototype._resetProjectCache = function(reset_project_active) {
      var ref, tbls;
      if ((ref = this.cache) != null) {
        ref.GetProject(false);
      }
      if (reset_project_active) {
        this.project_active = false;
      }
      this.project = null;
      this.c_folders = {
        0: {
          id: 0,
          folder_id: 0
        },
        FORMS: {
          id: -1
        },
        PUBLIC: {
          id: -1
        },
        PRIVATE: {
          id: -1
        }
      };
      this.c_files = {};
      this.c_annot_child = {};
      this.c_team = {};
      this.c_team_perms = false;
      this.c_activities = [];
      tbls = ['Team', 'User', 'Activity'];
      this.clip.undofiles = [];
      this.clip.undofolders = [];
      tbls.push('Clipboard');
      return this.invalidateTables(tbls);
    };

    Folder.prototype._getUserRecs = function() {
      var f;
      f = 'M:Folder._getUserRecs';
      if (this.c_user) {
        return this.c_user;
      }
      return this.c_user = this.rest.get('User', f);
    };

    Folder.prototype._getMemberRecs = function() {
      var f;
      f = 'M:Folder._getMemberRecs';
      return this.c_member != null ? this.c_member : this.c_member = {};
    };

    Folder.prototype._getFileVersions = function(project_id, fiid) {
      var f, ref, results;
      if (fiid in this.c_version_child) {
        return;
      }
      f = 'M:Folder._getFileVersions';
      results = this.rest.get("Project/" + project_id + "/File/" + fiid + "/version");
      _log2(f, results, this.c_version_child);
      return this.c_version_child[fiid] = (ref = results.files) != null ? ref : [];
    };

    Folder.prototype._getMemberRecsExtended = function() {
      var f, ref, results;
      f = 'M:Folder._getMemberRecsExtended';
      results = this.rest.get("User/me/Project");
      return (ref = results.projects) != null ? ref : {};
    };

    Folder.prototype._doIndexTeam = function(team) {};

    Folder.prototype._getTeamPerms = function() {
      var c_team_perms, f, j, len, me, name, rec, ref, results;
      f = 'M:Folder._getTeamPerms';
      if (this.c_team_perms) {
        return this.c_team_perms;
      }
      if (!this.project_active) {
        return {};
      }
      me = (this.Epic.getViewTable('User/Me'))[0];
      if (!this.c_team[me.id] || this.c_team[me.id].invited_as < 10) {
        return {};
      }
      results = this.rest.get("User/TODO/Project/" + this.project_active + "/permission");
      if (!results.permissions) {
        return {};
      }
      c_team_perms = {};
      ref = results.permissions;
      for (j = 0, len = ref.length; j < len; j++) {
        rec = ref[j];
        if (c_team_perms[name = rec.folder_id] == null) {
          c_team_perms[name] = {};
        }
        c_team_perms[rec.folder_id][rec.user_id] = rec.type;
      }
      return this.c_team_perms = c_team_perms;
    };

    Folder.prototype.fileRetry = function(id, prid, file_list) {
      var f, fid, j, len, rec;
      f = 'M:Folder.fileRetry:' + id;
      _log2(f, file_list);
      for (j = 0, len = file_list.length; j < len; j++) {
        rec = file_list[j];
        fid = '' + id + ':' + (rec.fid || rec);
        delete this.upload_response[fid];
        delete this.upload_file[fid];
      }
      return this.invalidateTables(true, ['TeamAdd']);
    };

    Folder.prototype.fileResponse = function(id, file_id, data) {
      var f, fid, ref, ref1, ref2, ref3, response;
      fid = '' + id + ':' + file_id;
      f = 'M:Folder.fileResponse:' + fid;
      _log2(f, 'data,u_f[fid]', data, this.upload_file[fid]);
      response = ((ref = data.files) != null ? ref[0] : void 0) || {
        id: false,
        code: data.status,
        alt_code: '',
        error: data.responseText[0] === '{' ? JSON.parse(data.responseText) : data.responseText
      };
      if (response.err) {
        response = {
          id: false,
          code: response.err.code,
          error: (ref1 = response.err.message) != null ? ref1 : response.err.msg
        };
      }
      if ((ref2 = response.error) != null ? ref2.msg : void 0) {
        response.alt_code = response.error.code;
        response.error = response.error.msg;
      }
      if ((ref3 = response.error) != null ? ref3.message : void 0) {
        response.error = response.error.message;
      }
      this.upload_response[fid] = response;
    };

    Folder.prototype.fileProgress = function(id, file_id, data) {
      var f, fid, invalidate, parent_id, project_id;
      fid = '' + id + ':' + file_id;
      f = 'M:Folder.fileProgress:' + fid;
      project_id = Number(data.project_id);
      parent_id = Number(data.parent_id);
      if (data.subevent === 'END' && this.upload_response[fid].id === false) {
        data.id = -1;
        data.code = this.upload_response[fid].code;
        data.error = this.upload_response[fid].error;
      }
      this.upload_file[fid] = data;
      invalidate = [];
      if (project_id === this.project_active) {
        if (this.folder_view_id[project_id]) {
          if (parent_id === this.folder_view_id[project_id]) {
            invalidate.push('File');
          }
        } else {
          if (parent_id === this.c_folders['PUBLIC'].id) {
            invalidate.push('PUBLIC');
          } else if (parent_id === this.c_folders['PRIVATE'].id) {
            invalidate.push('PRIVATE');
          } else if (parent_id === this.c_folders['FORMS'].id) {
            invalidate.push('FORMS');
          }
        }
      }
      if (invalidate.length) {
        this.invalidateTables(invalidate);
      }
    };

    Folder.prototype.foldersUploaded = function(id, project_id, parent_id, ids_list, folders_info) {
      var f, foid, ix, j, len, parent, rec;
      f = 'F:Folder.foldersUploaded';
      _log(f, id, project_id, parent_id, ids_list, folders_info);
      if (project_id !== this.project_active) {
        return;
      }
      parent = this.c_folders[parent_id];
      for (ix = j = 0, len = ids_list.length; j < len; ix = ++j) {
        foid = ids_list[ix];
        rec = folders_info[ix];
        this.c_folders[foid] = {
          id: foid,
          name: rec.name,
          folder_id: rec.ix === 0 ? parent_id : ids_list[rec.ix - 1],
          modifed: '',
          perm: parent.perm,
          "public": parent["public"]
        };
      }
      this.invalidateTables(this._whichTables(parent_id));
    };

    Folder.prototype._whichTables = function(folder_id) {
      return ['FORMS', 'PUBLIC', 'PRIVATE', 'Folder'];
    };

    Folder.prototype.getForDownload = function(include_versions) {
      var f, j, k, len, len1, r_files, r_folders, ref, ref1, results, row;
      f = 'M:Folder.getForDownload';
      if (include_versions) {
        results = this.rest.get("Project/" + this.project_active, f, {
          include_versions: 1
        });
        r_folders = {};
        ref = results.folders;
        for (j = 0, len = ref.length; j < len; j++) {
          row = ref[j];
          r_folders[row.id] = row;
        }
        $.extend(true, r_folders, {
          0: {
            id: 0,
            name: this.project.name,
            folder_id: 0
          },
          FORMS: {
            id: -1
          },
          PUBLIC: {
            id: -1
          },
          PRIVATE: {
            id: -1
          }
        });
        r_files = {};
        ref1 = results.files;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          row = ref1[k];
          r_files[row.id] = row;
        }
        return [this.project_active, r_folders, r_files, results.project.name];
      } else {
        return [this.project_active, this.c_folders, this.c_files, this.project.name];
      }
    };

    Folder.prototype.getActiveProjectList = function() {
      var ref, ref1;
      return (ref = (ref1 = this.cache) != null ? ref1.GetProjectList() : void 0) != null ? ref : {};
    };

    return Folder;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Folder = Folder;

}).call(this);
