// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var External,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  External = (function(_super) {

    __extends(External, _super);

    function External(Epic, view_nm) {
      this._checkVersion = __bind(this._checkVersion, this);

      this._getVersion = __bind(this._getVersion, this);
      External.__super__.constructor.call(this, Epic, view_nm);
      this._checkVersion('init');
    }

    External.prototype.eventNewRequest = function() {
      delete this.contact_us;
      return delete this.Table.Options;
    };

    External.prototype.action = function(action, params) {
      var i, m, parts, r, sub_action, _ref;
      r = {
        page: 'NO_MATCH'
      };
      i = new window.EpicMvc.Issue();
      m = new window.EpicMvc.Issue();
      sub_action = action.split('-');
      switch (sub_action[0]) {
        case 'parse_hash':
          parts = params.hash.split('-');
          r = (function() {
            switch (parts[0]) {
              case '':
                return {
                  page: 'EMPTY_HASH'
                };
              default:
                return {
                  page: parts[0],
                  code: parts[1]
                };
            }
          })();
          break;
        case 'seo':
          r.url = sub_action[1];
          break;
        case 'choose_learn_contact_us':
          this.contact_us = true;
          break;
        default:
          _ref = External.__super__.action.call(this, action, params), r = _ref[0], i = _ref[1], m = _ref[2];
      }
      return [r, i, m];
    };

    External.prototype.loadTable = function(tbl_nm) {
      var app, arr, d_ver, device, row, ver, _ref, _ref1;
      switch (tbl_nm) {
        case 'Version':
          row = {
            current: this.version.current,
            has_changed: this.version.change === true ? 'yes' : ''
          };
          return this.Table[tbl_nm] = [row];
        case 'Options':
          row = {
            tab_learn_contact: this.contact_us === true ? 'yes' : ''
          };
          return this.Table[tbl_nm] = [row];
        case 'Browser':
          _ref = this.navigator_browserType(), app = _ref[0], ver = _ref[1];
          row = {
            app: app,
            ver: ver,
            is_chrome: app === "Chrome" ? 'yes' : ''
          };
          _ref1 = this.navigator_deviceType(), device = _ref1[0], d_ver = _ref1[1];
          arr = ["iPhone", "iPad", "Mobile", "Android"];
          row.is_mobile = __indexOf.call(arr, device) >= 0 ? 'yes' : '';
          row.device = device ? device : '';
          row.d_ver = d_ver ? d_ver : '';
          return this.Table[tbl_nm] = [row];
      }
    };

    External.prototype.encode = function(key, value) {
      return "" + key + "-" + value;
    };

    External.prototype.navigator_browserType = function() {
      var M, N, tem, ua;
      N = navigator.appName;
      ua = navigator.userAgent;
      M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
      if (M && (tem = ua.match(/version\/([\.\d]+)/i)) !== null) {
        M[2] = tem[1];
      }
      if (M) {
        return [M[1], M[2]];
      } else {
        return [N, navigator.appVersion];
      }
    };

    External.prototype.navigator_deviceType = function() {
      var M, N, tem, ua;
      N = navigator.appName;
      ua = navigator.userAgent;
      M = ua.match(/(android|mobile|iphone|ipad)\/?\s*(\.?\d+(\.\d+)*)/i);
      if (M && (tem = ua.match(/version\/([\.\d]+)/i)) !== null) {
        M[2] = tem[1];
      }
      if (M) {
        return [M[1], M[2]];
      } else {
        return [N, navigator.appVersion];
      }
    };

    External.prototype._getVersion = function() {
      var _this = this;
      return $.get('version.txt', {
        _: new Date().getTime()
      }, function(data) {
        return _this._checkVersion(data);
      });
    };

    External.prototype._checkVersion = function(data) {
      var nm, obj, _i, _len, _ref;
      if (data === 'init') {
        this.version = {
          current: false,
          change: false,
          check: false,
          terms_use: false,
          privacy: false
        };
        this._getVersion();
        this.version.check = setInterval(this._getVersion, 1000 * 60 * 5);
      } else if (typeof data === 'string' && data[0] === '{') {
        obj = JSON.parse(data);
        _ref = ['terms_use', 'privacy'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          nm = _ref[_i];
          this.version[nm] = obj[nm + '_version'] || false;
        }
        if (this.version.current === false) {
          this.version.current = obj.index_html_version || false;
          this.invalidateTables(['Version']);
        } else if (this.version.current !== obj.index_html_version) {
          this.version.change = true;
          this.invalidateTables(['Version']);
        }
      }
      if (this.version.change === true && this.version.check !== false) {
        clearInterval(this.version.check);
        return this.version.check = false;
      }
    };

    return External;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.External = External;

}).call(this);
