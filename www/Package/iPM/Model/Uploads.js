// Generated by CoffeeScript 1.4.0
(function() {
  var Uploads,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Uploads = (function(_super) {

    __extends(Uploads, _super);

    function Uploads(Epic, view_nm) {
      var ss;
      ss = {
        active: false
      };
      Uploads.__super__.constructor.call(this, Epic, view_nm, ss);
      this.uploads = {};
      this.upload_ids = [];
      this.upload_retry_objects = [];
    }

    Uploads.prototype.eventNewRequest = function() {
      return this.Table = {};
    };

    Uploads.prototype.eventLogout = function() {
      this.Epic.renderer.UnloadMessage('upload');
      return true;
    };

    Uploads.prototype.action = function(act, p) {
      var all_files, callback_class, cb, f, fid, file, file_list, has_error, i, id, m, nm, prid, r, rec, _i, _len, _ref, _ref1,
        _this = this;
      f = "M:Uploads::action(" + act + ")";
      _log(f, p);
      r = {};
      i = new window.EpicMvc.Issue();
      m = new window.EpicMvc.Issue();
      switch (act) {
        case 'open':
          id = p.id;
          if (this.active !== id) {
            this.active = id;
          }
          r.success = 'SUCCESS';
          break;
        case 'close':
          this.active = false;
          r.success = 'SUCCESS';
          break;
        case 'confirm':
          id = p.id ? p.id : this.active;
          cb = this.uploads[id].cb;
          setTimeout((function() {
            return cb(p.answer);
          }), 0);
          if (!p.answer) {
            this._remove(id);
          }
          r.success = 'SUCCESS';
          break;
        case 'abort':
          id = p.id || this.active;
          if (id && this.uploads[id]) {
            this.uploads[id].oLoad.Cancel();
            this._remove(id);
            r.success = 'SUCCESS';
          } else {
            r.success = 'FAIL';
          }
          break;
        case 'delete':
          id = p.id;
          this._remove(id);
          r.success = 'SUCCESS';
          break;
        case 'delete_active_on_finish_clean':
          id = this.active;
          if (!(id in this.uploads)) {
            r.success = 'NO_SUCH_ID';
            return [r, i, m];
          }
          rec = this.uploads[id];
          if (rec.progress.step !== 'FINISH') {
            r.success = 'NOT_FINISHED';
            return [r, i, m];
          }
          has_error = false;
          _ref = rec.file_list;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nm = _ref[_i];
            file = rec.files[nm];
            if (((_ref1 = this.uploads[this.active].file_response[nm]) != null ? _ref1.id : void 0) === -1) {
              has_error = true;
              break;
            }
          }
          if (has_error === true) {
            r.success = 'HAS_ERROR';
            return [r, i, m];
          }
          this._remove(id);
          r.success = 'SUCCESS';
          break;
        case 'retry_all':
          _log(f, this.active, this.uploads[this.active]);
          prid = this.uploads[this.active].project_id;
          callback_class = p.callback_class;
          all_files = this.uploads[this.active].files;
          file_list = (function() {
            var _results;
            _results = [];
            for (fid in all_files) {
              rec = all_files[fid];
              if (this.uploads[this.active].file_response[fid].id === -1) {
                _results.push({
                  fid: fid,
                  file: rec.file,
                  parent_id: rec.parent_id
                });
              }
            }
            return _results;
          }).call(this);
          (this.Epic.getInstance('Directory')).fileRetry(this.active, prid, file_list);
          if (file_list.length !== 0) {
            (function(file_list, prid, callback_class) {
              return setTimeout((function() {
                return _this.upload_retry_objects.push(new window.EpicMvc.Extras.DropRetry(file_list, prid, window.EpicMvc.Extras[callback_class]));
              }), 0);
            })(file_list, prid, callback_class);
            r.success = 'SUCCESS';
          } else {
            i.add('NO_FILES_FOUND');
            r.success = 'EMPTY';
          }
          break;
        default:
          return Uploads.__super__.action.call(this, act, p);
      }
      this.invalidateTables(true);
      return [r, i, m];
    };

    Uploads.prototype._remove = function(id, no_retry) {
      if (no_retry !== false) {
        (this.Epic.getInstance('Directory')).fileRetry(id, this.uploads[id].project_id, this.uploads[id].file_list);
      }
      if (this.active === id) {
        this.active = false;
      }
      this.upload_ids.splice(this.upload_ids.indexOf(id), 1);
      delete this.uploads[id];
      if (this.upload_ids.length === 0) {
        return this.Epic.renderer.UnloadMessage('upload');
      }
    };

    Uploads.prototype.loadTable = function(tbl_nm) {
      var f, file, files, has_error, id, nm, result, row, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      f = "M:Uploads::loadTable(" + tbl_nm + ")";
      switch (tbl_nm) {
        case 'Loader':
          result = [];
          _ref = this.upload_ids;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            row = this.uploads[id].progress;
            row.id = id;
            result.push(row);
          }
          this.Table[tbl_nm] = result;
          break;
        case 'Open':
          result = [];
          if (this.active && this.uploads[this.active]) {
            files = [];
            has_error = 0;
            _ref1 = this.uploads[this.active].file_list;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              nm = _ref1[_j];
              file = this.uploads[this.active].files[nm];
              file.has_error = ((_ref2 = this.uploads[this.active].file_response[nm]) != null ? _ref2.id : void 0) === -1 ? 'yes' : '';
              if (file.has_error === 'yes') {
                has_error++;
              }
              file.icon_ext = window.extToIconPostfix(file.name);
              files.push(file);
            }
            result.push($.extend(true, {}, this.uploads[this.active].progress, {
              File: files,
              has_error: has_error
            }));
          } else {
            result.push({});
          }
          this.Table[tbl_nm] = result;
          break;
        default:
          Uploads.__super__.loadTable.call(this, tbl_nm);
      }
    };

    Uploads.prototype.newUpload = function(load_object, project_id) {
      var id;
      id = 'upload-' + this.Epic.nextCounter();
      this.uploads[id] = {
        oLoad: load_object,
        project_id: project_id,
        progress: {},
        files: {},
        file_list: [],
        file_response: {}
      };
      this.Epic.renderer.UnloadMessage('upload', 'Leaving the page will stop all upload activity');
      this.upload_ids.push(id);
      this.invalidateTables(['Loader']);
      this.active = id;
      return id;
    };

    Uploads.prototype.uploadProgress = function(id, data) {
      var f, tbls;
      f = 'M:Uploads.uploadProgress:' + id;
      this.uploads[id].progress = data;
      tbls = ['Loader'];
      if (id === this.active) {
        tbls.push('Open');
      }
      return this.invalidateTables(tbls);
    };

    Uploads.prototype.uploadAbort = function(id) {
      if (id in this.uploads) {
        return this._remove(id, true);
      }
    };

    Uploads.prototype.fileProgress = function(id, file_id, data) {
      var f;
      f = 'M:Uploads.fileProgress:' + id;
      if (!this.uploads[id].files[file_id]) {
        this.uploads[id].file_list.push(file_id);
      }
      this.uploads[id].files[file_id] = data;
      if (id === this.active) {
        return this.invalidateTables(['Open']);
      }
    };

    Uploads.prototype.fileResponse = function(id, file_id, data) {
      var f, response, _ref;
      f = 'F:Uploads.fileResponse:' + id;
      _log(f, file_id, data);
      response = ((_ref = data.files) != null ? _ref[0] : void 0) || {
        id: -1,
        code: data.status,
        error: data.responseText
      };
      if (response.err) {
        response = {
          id: -1,
          code: response.err.code,
          error: response.err.message
        };
      }
      return this.uploads[id].file_response[file_id] = response;
    };

    Uploads.prototype.replyCallback = function(id, cb) {
      return this.uploads[id].cb = cb;
    };

    return Uploads;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Uploads = Uploads;

}).call(this);
