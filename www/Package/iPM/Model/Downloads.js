// Generated by CoffeeScript 1.4.0
(function() {
  var Downloads,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Downloads = (function(_super) {

    __extends(Downloads, _super);

    function Downloads(Epic, view_nm) {
      Downloads.__super__.constructor.call(this, Epic, view_nm);
      this.downloads = {};
      this.download_ids = [];
      this.prefix = 'download-';
      this.in_progress = 0;
    }

    Downloads.prototype.eventNewRequest = function() {
      return this.Table = {};
    };

    Downloads.prototype.eventLogout = function() {
      this.Epic.renderer.UnloadMessage('download');
      return true;
    };

    Downloads.prototype.action = function(act, p) {
      var cbc, f, files, foid, folders, i, id, include_versions, m, oDir, prid, project_name, r, _ref,
        _this = this;
      f = "M:Downloads::action(" + act + ")";
      _log(f, p);
      r = {};
      i = new window.EpicMvc.Issue();
      m = new window.EpicMvc.Issue();
      switch (act) {
        case 'abort':
          id = p.id ? p.id : this.active;
          if (id && this.downloads[id]) {
            this.downloads[id].oZip.Cancel();
            this._remove(id);
            delete this.active;
            r.success = 'SUCCESS';
          } else {
            r.success = 'FAIL';
          }
          break;
        case 'choose_loader':
          id = p.id;
          this.active = id;
          r.success = 'SUCCESS';
          break;
        case 'delete':
          id = p.id ? p.id : this.active;
          if (id && this.downloads[id]) {
            this._remove(id);
            delete this.active;
            r.success = 'SUCCESS';
          } else {
            r.success = 'FAIL';
          }
          break;
        case 'download':
          _log(f, {
            id: p.id,
            cbc: p.callback_class
          });
          foid = p.id ? Number(p.id) : 0;
          cbc = window.EpicMvc.Extras[p.callback_class];
          oDir = this.Epic.getInstance('Directory');
          include_versions = true;
          _ref = oDir.getForDownload(include_versions), prid = _ref[0], folders = _ref[1], files = _ref[2], project_name = _ref[3];
          (function(prid, foid, files, folders, cbc) {
            return setTimeout((function() {
              var cbo, curr_ids, dir, new_id, oZip;
              oZip = new window.EpicMvc.Extras.Zip(prid, foid);
              curr_ids = (function() {
                var _i, _len, _ref1, _ref2, _results;
                _ref1 = this.download_ids;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  dir = _ref1[_i];
                  if (((_ref2 = this.downloads[dir].progress) != null ? _ref2.step : void 0) !== 'FINISH') {
                    _results.push(dir);
                  }
                }
                return _results;
              }).call(_this);
              new_id = _this._newDownload(oZip, prid);
              cbo = new cbc(oZip, prid, new_id);
              return oZip.Start(files, folders, project_name, cbo, new_id, curr_ids, _this.prefix, include_versions);
            }), 10);
          })(prid, foid, files, folders, cbc);
          r.success = 'SUCCESS';
          break;
        default:
          return Downloads.__super__.action.call(this, act, p);
      }
      this.invalidateTables(true);
      return [r, i, m];
    };

    Downloads.prototype._remove = function(id) {
      var _ref;
      if (((_ref = this.downloads[id].progress) != null ? _ref.step : void 0) !== 'FINISH') {
        this.in_progress -= 1;
      }
      this.download_ids.splice(this.download_ids.indexOf(id), 1);
      delete this.downloads[id];
      if (this.in_progress === 0) {
        return this.Epic.renderer.UnloadMessage('download');
      }
    };

    Downloads.prototype.loadTable = function(tbl_nm) {
      var f, id, result, row, _i, _len, _ref;
      f = "M:Downloads::loadTable(" + tbl_nm + ")";
      switch (tbl_nm) {
        case 'Loader':
          result = [];
          _ref = this.download_ids;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            row = this.downloads[id].progress;
            row.id = id;
            result.push(row);
          }
          this.Table[tbl_nm] = result;
          break;
        default:
          Downloads.__super__.loadTable.call(this, tbl_nm);
      }
    };

    Downloads.prototype._newDownload = function(zip_object, project_id) {
      var id;
      id = this.prefix + this.Epic.nextCounter();
      this.downloads[id] = {
        oZip: zip_object,
        project_id: project_id,
        progress: {
          step: 'START',
          files: '-',
          total_files: '-',
          bytes: 0,
          total_bytes: 0
        },
        files: {},
        file_list: [],
        file_response: {}
      };
      this.download_ids.push(id);
      this.in_progress += 1;
      this.Epic.renderer.UnloadMessage('download', 'Leaving the page will stop all download activity');
      this.invalidateTables(['Loader']);
      return id;
    };

    Downloads.prototype.downloadProgress = function(id, data) {
      var f;
      f = 'M:Downloads.downloadProgress:' + id;
      this.downloads[id].progress = data;
      if (data.step === 'FINISH') {
        this.in_progress -= 1;
      }
      if (this.in_progress === 0) {
        this.Epic.renderer.UnloadMessage('download');
      }
      return this.invalidateTables(['Loader']);
    };

    Downloads.prototype.fileProgress = function(id, file_id, data) {
      var f;
      f = 'M:Downloads.fileProgress:' + id;
      if (!this.downloads[id].files[file_id]) {
        this.downloads[id].file_list.push(file_id);
      }
      return this.downloads[id].files[file_id] = data;
    };

    Downloads.prototype.fileResponse = function(id, file_id, data) {
      var f, response, _ref;
      f = 'F:Downloads.fileResponse:' + id;
      _log(f, file_id, data);
      response = ((_ref = data.files) != null ? _ref[0] : void 0) || {
        id: -1,
        code: data.status,
        error: data.responseText
      };
      if (response.err) {
        response = {
          id: -1,
          code: response.err.code,
          error: response.err.message
        };
      }
      return this.downloads[id].file_response[file_id] = response;
    };

    Downloads.prototype.replyCallback = function(id, cb) {
      return this.downloads[id].cb = cb;
    };

    return Downloads;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Downloads = Downloads;

}).call(this);
