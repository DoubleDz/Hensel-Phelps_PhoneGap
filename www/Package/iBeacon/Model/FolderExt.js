// Generated by CoffeeScript 1.9.2
(function() {
  var FolderExt,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FolderExt = (function(superClass) {
    extend(FolderExt, superClass);

    function FolderExt(Epic, view_nm) {
      var ss;
      ss = {
        graphic_url: false
      };
      FolderExt.__super__.constructor.call(this, Epic, view_nm, ss);
      this.inRegion = {};
      this.beaconFolders = false;
      this.beaconfiles = [];
      this.bodyEl = document.body;
      this.isOpen = false;
      this.isAnimating = false;
    }

    FolderExt.prototype.action = function(act, p) {
      var bfile, f, file, i, id, idx, initialPath, j, len, m, morphEl, n, path, pathOpen, r, ref, ref1, ref2, response, s;
      f = "M:Folder.action(" + act + ")";
      _log2(f, p, (function() {
        var results;
        results = [];
        for (n in this.ss) {
          results.push({}[n] = this[n]);
        }
        return results;
      }).call(this));
      r = {};
      i = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
      m = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
      switch (act) {
        case 'toggle_menu':
          morphEl = document.getElementById('morph-shape');
          s = Snap(morphEl.querySelector('svg'));
          path = s.select('path');
          initialPath = path.attr('d');
          pathOpen = morphEl.getAttribute('data-morph-open');
          _log2(morphEl, s, initialPath, pathOpen, this.isAnimating);
          if (this.isAnimating) {
            return false;
          }
          this.isAnimating = true;
          if (this.isOpen) {
            classie.remove(this.bodyEl, 'show-menu');
            setTimeout(((function(_this) {
              return function() {
                path.attr('d', initialPath);
                return _this.isAnimating = false;
              };
            })(this)), 300);
          } else {
            classie.add(this.bodyEl, 'show-menu');
            path.animate({
              'path': pathOpen
            }, 400, mina.easeinout, (function(_this) {
              return function() {
                return _this.isAnimating = false;
              };
            })(this));
          }
          this.isOpen = !this.isOpen;
          break;
        case 'toggle_beacon_region':
          if (this.inRegion[p.id] === true) {
            this.inRegion[p.id] = false;
            ref = this.beaconfiles;
            for (j = 0, len = ref.length; j < len; j++) {
              bfile = ref[j];
              if (bfile.folder_id === (Number(p.id))) {
                idx = this.beaconfiles.indexOf(file);
                this.beaconfiles.splice(idx, 1);
              }
            }
          } else {
            this.inRegion[p.id] = true;
            ref1 = this.c_files;
            for (id in ref1) {
              file = ref1[id];
              if (file.folder_id === (Number(p.id))) {
                this.beaconfiles.push(file);
              }
            }
          }
          _log2('IN Region:', this.inRegion[p.id], this.beaconfiles);
          this.invalidateTables(true);
          break;
        case 'load_floorplan':
          this.beaconfolders = this.c_folders;
          ref2 = this.c_files;
          for (id in ref2) {
            file = ref2[id];
            if (file.folder_id === this.folder_view_id[this.project_active] && file.name === 'floorplan.png') {
              response = this.rest.get("/Project/" + this.project_active + "/File/" + file.id + "/inline", 'S3Open()');
              if (!('signed_url' in response)) {
                alert('S3Open() bad response: ' + JSON.stringify(response));
                return false;
              } else {
                this.file_signed_url = response.signed_url;
                this.Table = {};
                r.success = 'SUCCESS';
              }
              this.invalidateTables(true);
            }
          }
          break;
        default:
          return FolderExt.__super__.action.call(this, act, p);
      }
      return [r, i, m];
    };

    FolderExt.prototype.loadTable = function(tbl_nm) {
      var beaconDict, beaconKeys, beacondata, beaconfile, f, file, file_id, folder, folder_id, j, k, len, len1, parsedData, ref, ref1, ref2, ref3, ref4, table;
      f = 'M:FolderExt.loadTable:' + tbl_nm;
      this._getProjectData();
      switch (tbl_nm) {
        case 'BeaconInfo':
          table = [];
          _log2('FOLDERS', this.c_folders);
          ref = this.c_folders;
          for (folder_id in ref) {
            folder = ref[folder_id];
            beaconDict = {};
            beaconKeys = folder.name.split(", ");
            beaconDict['folder_id'] = folder.folder_id;
            beaconDict['id'] = folder.id;
            for (j = 0, len = beaconKeys.length; j < len; j++) {
              beacondata = beaconKeys[j];
              parsedData = beacondata.split(":");
              beaconDict[parsedData[0]] = parsedData[1];
            }
            if (beaconDict.id && beaconDict.folder_id && beaconDict.Beacon && beaconDict.UUID) {
              if (folder.folder_id === this.folder_view_id[this.project_active]) {
                table.push(beaconDict);
              }
            }
          }
          _log2('BeaconInfo Table', table);
          this.Table[tbl_nm] = table;
          break;
        case 'RootFile':
          table = [];
          if (this.root_open['PUBLIC']) {
            table = this._getFileTable(this.c_folders['PUBLIC'].id);
          }
          this.Table[tbl_nm] = table;
          break;
        case 'BeaconFile':
          table = [];
          ref1 = this._getFileTable(this.folder_view_id[this.project_active]);
          for (file_id in ref1) {
            file = ref1[file_id];
            file['icon_ext'] = file.name.split(".", 2);
            if (file.name !== 'floorplan.png') {
              table.push(file);
            }
          }
          if (this.beaconfiles.length > 0) {
            ref2 = this.beaconfiles;
            for (k = 0, len1 = ref2.length; k < len1; k++) {
              beaconfile = ref2[k];
              beaconfile.has_error = false;
              beaconfile['icon_ext'] = beaconfile.name.split(".", 2);
              table.push(beaconfile);
            }
          }
          _log2('FILE TABLE', table);
          this.Table[tbl_nm] = table;
          break;
        default:
          FolderExt.__super__.loadTable.call(this, tbl_nm);
      }
      return;
      return (ref3 = (ref4 = this.cache) != null ? ref4.GetProjectList() : void 0) != null ? ref3 : {};
    };

    return FolderExt;

  })(window.EpicMvc.Model.Folder);

  window.EpicMvc.Model.FolderExt = FolderExt;

}).call(this);
